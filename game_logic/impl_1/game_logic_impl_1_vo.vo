
// Verilog netlist produced by program backanno, Version Radiant Software (64-bit) 2.2.0.97.3

// backanno -o game_logic_impl_1_vo.vo -sp High-Performance_1.2V -w -neg -gui game_logic_impl_1.udb 
// Netlist created on Fri May  7 12:09:01 2021
// Netlist written on Fri May  7 12:09:03 2021
// Design is for device iCE40UP5K
// Design is for package SG48
// Design is for performance grade High-Performance_1.2V

`timescale 1 ns / 1 ps

module game_logic ( g_clk, data, game_over );
  input  g_clk, data;
  output game_over;
  wire   \c_controller.cannon_controller.counter_C.n73[12] , 
         \c_controller.cannon_controller.counter_C.n73[11] , 
         \c_controller.cannon_controller.counter_C.n2593 , 
         \c_controller.cannon_controller.NEScount[3] , 
         \c_controller.cannon_controller.counter_C.n1863 , 
         \c_controller.cannon_controller.counter_C.n6 , 
         \c_controller.cannon_controller.clk_d , 
         \c_controller.cannon_controller.counter_C.n1865 , 
         \c_controller.cannon_controller.counter_C.n73[10] , 
         \c_controller.cannon_controller.counter_C.n73[9] , 
         \c_controller.cannon_controller.counter_C.n2590 , 
         \c_controller.cannon_controller.counter_C.n7 , 
         \c_controller.cannon_controller.counter_C.n1861 , 
         \c_controller.cannon_controller.counter_C.n8 , 
         \c_controller.cannon_controller.counter_C.n73[8] , 
         \c_controller.cannon_controller.counter_C.n73[7] , 
         \c_controller.cannon_controller.counter_C.n2587 , 
         \c_controller.cannon_controller.NESclk , 
         \c_controller.cannon_controller.counter_C.n1859 , 
         \c_controller.cannon_controller.counter_C.n10 , 
         \c_controller.cannon_controller.counter_C.n73[6] , 
         \c_controller.cannon_controller.counter_C.n73[5] , 
         \c_controller.cannon_controller.counter_C.n2584 , 
         \c_controller.cannon_controller.counter_C.n11 , 
         \c_controller.cannon_controller.counter_C.n1857 , 
         \c_controller.cannon_controller.counter_C.n12 , 
         \c_controller.cannon_controller.counter_C.n73[4] , 
         \c_controller.cannon_controller.counter_C.n73[3] , 
         \c_controller.cannon_controller.counter_C.n2581 , 
         \c_controller.cannon_controller.counter_C.n13 , 
         \c_controller.cannon_controller.counter_C.n1855 , 
         \c_controller.cannon_controller.counter_C.n14 , 
         \c_controller.cannon_controller.counter_C.n73[2] , 
         \c_controller.cannon_controller.counter_C.n73[1] , 
         \c_controller.cannon_controller.counter_C.n2578 , 
         \c_controller.cannon_controller.counter_C.n15 , 
         \c_controller.cannon_controller.counter_C.n1853 , 
         \c_controller.cannon_controller.counter_C.n16 , 
         \c_controller.cannon_controller.counter_C.n73[16] , 
         \c_controller.cannon_controller.counter_C.n73[15] , 
         \c_controller.cannon_controller.counter_C.n2599 , 
         \c_controller.cannon_controller.NEScount[7] , 
         \c_controller.cannon_controller.counter_C.n1867 , 
         \c_controller.cannon_controller.NEScount[6] , 
         \c_controller.cannon_controller.counter_C.n73[0] , 
         \c_controller.cannon_controller.counter_C.n2575 , 
         \c_controller.cannon_controller.counter_C.n17 , VCC_net, 
         \c_controller.cannon_controller.counter_C.n73[14] , 
         \c_controller.cannon_controller.counter_C.n73[13] , 
         \c_controller.cannon_controller.counter_C.n2596 , 
         \c_controller.cannon_controller.NEScount[5] , 
         \c_controller.cannon_controller.NEScount[4] , n38, n2608, n1877, 
         \g_count[7] , g_clk_c, n39, n40, n2605, \g_count[6] , n1875, 
         \g_count[5] , n41, n42, n2602, \g_count[4] , n1873, \g_count[3] , n43, 
         n44, n2572, \g_count[2] , n1871, \g_count[1] , n45, n2569, 
         \g_count[0] , 
         \c_controller.cannon_controller.temp[5].sig_001.FeedThruLUT , 
         \c_controller.cannon_controller.temp[6].sig_000.FeedThruLUT , 
         \c_controller.cannon_controller.temp[5] , 
         \c_controller.cannon_controller.temp[6] , 
         \c_controller.cannon_controller.temp_7__N_160 , fire_tmp, 
         \c_controller.cannon_controller.temp[3].sig_003.FeedThruLUT , 
         \c_controller.cannon_controller.temp[4].sig_002.FeedThruLUT , 
         \c_controller.cannon_controller.temp[3] , 
         \c_controller.cannon_controller.temp[4] , 
         \c_controller.move_right.sig_005.FeedThruLUT , 
         \c_controller.cannon_controller.temp[2].sig_004.FeedThruLUT , 
         \c_controller.move_right , \c_controller.cannon_controller.temp[2] , 
         \c_controller.move_left.sig_006.FeedThruLUT , 
         \c_controller.move_left , \b_nxt_row[12].sig_049.FeedThruLUT , 
         \b_nxt_row[13].sig_007.FeedThruLUT , \b_nxt_row[12] , \b_nxt_row[13] , 
         n1423, n1540, \b_wr[13] , \b_wr[12] , 
         \b_nxt_row[15].sig_009.FeedThruLUT , 
         \b_nxt_row[14].sig_008.FeedThruLUT , \b_nxt_row[15] , \b_nxt_row[14] , 
         \b_wr[14] , \b_wr[15] , \b_nxt_row[5].sig_012.FeedThruLUT , 
         \b_nxt_row[4].sig_010.FeedThruLUT , \b_nxt_row[5] , \b_nxt_row[4] , 
         \b_wr[4] , \b_wr[5] , \b_nxt_row[17].sig_014.FeedThruLUT , 
         \b_nxt_row[16].sig_011.FeedThruLUT , \b_nxt_row[17] , \b_nxt_row[16] , 
         \b_wr[16] , \b_wr[17] , n2021, n2025, n39_adj_179, \b_count[0] , 
         \b_count[1] , n1671, b_clk, game_over_N_102, n824, \n939$n3 , 
         \n940$n0 , n934, n935, \b_count[1].sig_038.FeedThruLUT , 
         \b_count[0].sig_013.FeedThruLUT , \b_addr[0] , \b_addr[1] , 
         \b_nxt_row[19].sig_040.FeedThruLUT , 
         \b_nxt_row[18].sig_015.FeedThruLUT , \b_nxt_row[19] , \b_nxt_row[18] , 
         \b_wr[18] , \b_wr[19] , \b_nxt_row[19].sig_016.FeedThruLUT , 
         \b_generator.i_19__N_127 , \b_generator.n33 , \b_generator.n36 , 
         \b_generator.n35 , \b_generator.n34 , 
         \b_nxt_row[17].sig_018.FeedThruLUT , 
         \b_nxt_row[18].sig_017.FeedThruLUT , 
         \b_nxt_row[15].sig_020.FeedThruLUT , 
         \b_nxt_row[16].sig_019.FeedThruLUT , 
         \b_nxt_row[13].sig_022.FeedThruLUT , 
         \b_nxt_row[14].sig_021.FeedThruLUT , 
         \b_nxt_row[11].sig_024.FeedThruLUT , 
         \b_nxt_row[12].sig_023.FeedThruLUT , \b_nxt_row[11] , \b_nxt_row[10] , 
         \b_nxt_row[9].sig_026.FeedThruLUT , 
         \b_nxt_row[10].sig_025.FeedThruLUT , \b_nxt_row[9] , \b_nxt_row[8] , 
         \b_nxt_row[7].sig_028.FeedThruLUT , 
         \b_nxt_row[8].sig_027.FeedThruLUT , \b_nxt_row[7] , \b_nxt_row[6] , 
         \b_nxt_row[5].sig_030.FeedThruLUT , 
         \b_nxt_row[6].sig_029.FeedThruLUT , 
         \b_nxt_row[3].sig_032.FeedThruLUT , 
         \b_nxt_row[4].sig_031.FeedThruLUT , \b_nxt_row[3] , \b_nxt_row[2] , 
         \b_nxt_row[1].sig_034.FeedThruLUT , 
         \b_nxt_row[2].sig_033.FeedThruLUT , \b_nxt_row[1] , \b_nxt_row[0] , 
         \b_nxt_row[7].sig_039.FeedThruLUT , 
         \b_nxt_row[6].sig_035.FeedThruLUT , \b_wr[6] , \b_wr[7] , 
         \b_count[2].sig_037.FeedThruLUT , \b_count[3].sig_036.FeedThruLUT , 
         \b_count[2] , \b_count[3] , \b_addr[3] , \b_addr[2] , \n938$n2 , 
         \n937$n1 , n933, n932, n2023, n2027, n4, 
         \b_nxt_row[10].sig_048.FeedThruLUT , 
         \b_nxt_row[11].sig_041.FeedThruLUT , \b_wr[11] , \b_wr[10] , 
         \b_nxt_row[0].sig_043.FeedThruLUT , 
         \b_nxt_row[1].sig_042.FeedThruLUT , \b_wr[1] , \b_wr[0] , 
         \b_nxt_row[9].sig_045.FeedThruLUT , 
         \b_nxt_row[8].sig_044.FeedThruLUT , \b_wr[8] , \b_wr[9] , 
         \b_nxt_row[3].sig_047.FeedThruLUT , 
         \b_nxt_row[2].sig_046.FeedThruLUT , \b_wr[2] , \b_wr[3] , \c_pos[0] , 
         \c_controller.n8 , \c_pos[3] , \c_pos[2] , \c_pos[1] , \c_pos[4] , 
         \c_controller.n915 , \c_controller.n6 , \c_controller.n8_adj_178 , 
         \c_controller.pos_tmp_4__N_147 , \b_rd[19] , \b_rd[18] , n2391, 
         \c_controller.n2 , \b_rd[1] , n2385, \b_rd[0] , \b_rd[3] , \b_rd[2] , 
         n2215, n818, n2228, n2376, n2394, \b_rd[17] , \b_rd[16] , n2361, 
         \b_rd[12] , \b_rd[13] , \b_rd[15] , \b_rd[14] , n2364, \b_rd[8] , 
         n2367, \b_rd[9] , \b_rd[10] , \b_rd[11] , n2370, n2218, n2373, 
         \b_rd[5] , n2379, \b_rd[4] , \b_rd[6] , \b_rd[7] , 
         \c_controller.cannon_controller.n6 , n34, n36, n33, n35, n940, n939, 
         \b_generator.n22 , \b_generator.n32 , n32, n22, n14, n10, n938, n937, 
         data_c, game_over_c;

  c_controller_cannon_controller_counter_C_SLICE_0 
    \c_controller.cannon_controller.counter_C.SLICE_0 ( 
    .DI1(\c_controller.cannon_controller.counter_C.n73[12] ), 
    .DI0(\c_controller.cannon_controller.counter_C.n73[11] ), 
    .D1(\c_controller.cannon_controller.counter_C.n2593 ), 
    .C1(\c_controller.cannon_controller.NEScount[3] ), 
    .D0(\c_controller.cannon_controller.counter_C.n1863 ), 
    .C0(\c_controller.cannon_controller.counter_C.n6 ), 
    .CLK(\c_controller.cannon_controller.clk_d ), 
    .CIN0(\c_controller.cannon_controller.counter_C.n1863 ), 
    .CIN1(\c_controller.cannon_controller.counter_C.n2593 ), 
    .Q0(\c_controller.cannon_controller.counter_C.n6 ), 
    .Q1(\c_controller.cannon_controller.NEScount[3] ), 
    .F0(\c_controller.cannon_controller.counter_C.n73[11] ), 
    .F1(\c_controller.cannon_controller.counter_C.n73[12] ), 
    .COUT1(\c_controller.cannon_controller.counter_C.n1865 ), 
    .COUT0(\c_controller.cannon_controller.counter_C.n2593 ));
  c_controller_cannon_controller_counter_C_SLICE_1 
    \c_controller.cannon_controller.counter_C.SLICE_1 ( 
    .DI1(\c_controller.cannon_controller.counter_C.n73[10] ), 
    .DI0(\c_controller.cannon_controller.counter_C.n73[9] ), 
    .D1(\c_controller.cannon_controller.counter_C.n2590 ), 
    .C1(\c_controller.cannon_controller.counter_C.n7 ), 
    .D0(\c_controller.cannon_controller.counter_C.n1861 ), 
    .C0(\c_controller.cannon_controller.counter_C.n8 ), 
    .CLK(\c_controller.cannon_controller.clk_d ), 
    .CIN0(\c_controller.cannon_controller.counter_C.n1861 ), 
    .CIN1(\c_controller.cannon_controller.counter_C.n2590 ), 
    .Q0(\c_controller.cannon_controller.counter_C.n8 ), 
    .Q1(\c_controller.cannon_controller.counter_C.n7 ), 
    .F0(\c_controller.cannon_controller.counter_C.n73[9] ), 
    .F1(\c_controller.cannon_controller.counter_C.n73[10] ), 
    .COUT1(\c_controller.cannon_controller.counter_C.n1863 ), 
    .COUT0(\c_controller.cannon_controller.counter_C.n2590 ));
  c_controller_cannon_controller_counter_C_SLICE_2 
    \c_controller.cannon_controller.counter_C.SLICE_2 ( 
    .DI1(\c_controller.cannon_controller.counter_C.n73[8] ), 
    .DI0(\c_controller.cannon_controller.counter_C.n73[7] ), 
    .D1(\c_controller.cannon_controller.counter_C.n2587 ), 
    .C1(\c_controller.cannon_controller.NESclk ), 
    .D0(\c_controller.cannon_controller.counter_C.n1859 ), 
    .C0(\c_controller.cannon_controller.counter_C.n10 ), 
    .CLK(\c_controller.cannon_controller.clk_d ), 
    .CIN0(\c_controller.cannon_controller.counter_C.n1859 ), 
    .CIN1(\c_controller.cannon_controller.counter_C.n2587 ), 
    .Q0(\c_controller.cannon_controller.counter_C.n10 ), 
    .Q1(\c_controller.cannon_controller.NESclk ), 
    .F0(\c_controller.cannon_controller.counter_C.n73[7] ), 
    .F1(\c_controller.cannon_controller.counter_C.n73[8] ), 
    .COUT1(\c_controller.cannon_controller.counter_C.n1861 ), 
    .COUT0(\c_controller.cannon_controller.counter_C.n2587 ));
  c_controller_cannon_controller_counter_C_SLICE_3 
    \c_controller.cannon_controller.counter_C.SLICE_3 ( 
    .DI1(\c_controller.cannon_controller.counter_C.n73[6] ), 
    .DI0(\c_controller.cannon_controller.counter_C.n73[5] ), 
    .D1(\c_controller.cannon_controller.counter_C.n2584 ), 
    .C1(\c_controller.cannon_controller.counter_C.n11 ), 
    .D0(\c_controller.cannon_controller.counter_C.n1857 ), 
    .C0(\c_controller.cannon_controller.counter_C.n12 ), 
    .CLK(\c_controller.cannon_controller.clk_d ), 
    .CIN0(\c_controller.cannon_controller.counter_C.n1857 ), 
    .CIN1(\c_controller.cannon_controller.counter_C.n2584 ), 
    .Q0(\c_controller.cannon_controller.counter_C.n12 ), 
    .Q1(\c_controller.cannon_controller.counter_C.n11 ), 
    .F0(\c_controller.cannon_controller.counter_C.n73[5] ), 
    .F1(\c_controller.cannon_controller.counter_C.n73[6] ), 
    .COUT1(\c_controller.cannon_controller.counter_C.n1859 ), 
    .COUT0(\c_controller.cannon_controller.counter_C.n2584 ));
  c_controller_cannon_controller_counter_C_SLICE_4 
    \c_controller.cannon_controller.counter_C.SLICE_4 ( 
    .DI1(\c_controller.cannon_controller.counter_C.n73[4] ), 
    .DI0(\c_controller.cannon_controller.counter_C.n73[3] ), 
    .D1(\c_controller.cannon_controller.counter_C.n2581 ), 
    .C1(\c_controller.cannon_controller.counter_C.n13 ), 
    .D0(\c_controller.cannon_controller.counter_C.n1855 ), 
    .C0(\c_controller.cannon_controller.counter_C.n14 ), 
    .CLK(\c_controller.cannon_controller.clk_d ), 
    .CIN0(\c_controller.cannon_controller.counter_C.n1855 ), 
    .CIN1(\c_controller.cannon_controller.counter_C.n2581 ), 
    .Q0(\c_controller.cannon_controller.counter_C.n14 ), 
    .Q1(\c_controller.cannon_controller.counter_C.n13 ), 
    .F0(\c_controller.cannon_controller.counter_C.n73[3] ), 
    .F1(\c_controller.cannon_controller.counter_C.n73[4] ), 
    .COUT1(\c_controller.cannon_controller.counter_C.n1857 ), 
    .COUT0(\c_controller.cannon_controller.counter_C.n2581 ));
  c_controller_cannon_controller_counter_C_SLICE_5 
    \c_controller.cannon_controller.counter_C.SLICE_5 ( 
    .DI1(\c_controller.cannon_controller.counter_C.n73[2] ), 
    .DI0(\c_controller.cannon_controller.counter_C.n73[1] ), 
    .D1(\c_controller.cannon_controller.counter_C.n2578 ), 
    .C1(\c_controller.cannon_controller.counter_C.n15 ), 
    .D0(\c_controller.cannon_controller.counter_C.n1853 ), 
    .C0(\c_controller.cannon_controller.counter_C.n16 ), 
    .CLK(\c_controller.cannon_controller.clk_d ), 
    .CIN0(\c_controller.cannon_controller.counter_C.n1853 ), 
    .CIN1(\c_controller.cannon_controller.counter_C.n2578 ), 
    .Q0(\c_controller.cannon_controller.counter_C.n16 ), 
    .Q1(\c_controller.cannon_controller.counter_C.n15 ), 
    .F0(\c_controller.cannon_controller.counter_C.n73[1] ), 
    .F1(\c_controller.cannon_controller.counter_C.n73[2] ), 
    .COUT1(\c_controller.cannon_controller.counter_C.n1855 ), 
    .COUT0(\c_controller.cannon_controller.counter_C.n2578 ));
  c_controller_cannon_controller_counter_C_SLICE_6 
    \c_controller.cannon_controller.counter_C.SLICE_6 ( 
    .DI1(\c_controller.cannon_controller.counter_C.n73[16] ), 
    .DI0(\c_controller.cannon_controller.counter_C.n73[15] ), 
    .D1(\c_controller.cannon_controller.counter_C.n2599 ), 
    .C1(\c_controller.cannon_controller.NEScount[7] ), 
    .D0(\c_controller.cannon_controller.counter_C.n1867 ), 
    .C0(\c_controller.cannon_controller.NEScount[6] ), 
    .CLK(\c_controller.cannon_controller.clk_d ), 
    .CIN0(\c_controller.cannon_controller.counter_C.n1867 ), 
    .CIN1(\c_controller.cannon_controller.counter_C.n2599 ), 
    .Q0(\c_controller.cannon_controller.NEScount[6] ), 
    .Q1(\c_controller.cannon_controller.NEScount[7] ), 
    .F0(\c_controller.cannon_controller.counter_C.n73[15] ), 
    .F1(\c_controller.cannon_controller.counter_C.n73[16] ), 
    .COUT0(\c_controller.cannon_controller.counter_C.n2599 ));
  c_controller_cannon_controller_counter_C_SLICE_7 
    \c_controller.cannon_controller.counter_C.SLICE_7 ( 
    .DI1(\c_controller.cannon_controller.counter_C.n73[0] ), 
    .D1(\c_controller.cannon_controller.counter_C.n2575 ), 
    .C1(\c_controller.cannon_controller.counter_C.n17 ), .B1(VCC_net), 
    .CLK(\c_controller.cannon_controller.clk_d ), 
    .CIN1(\c_controller.cannon_controller.counter_C.n2575 ), 
    .Q1(\c_controller.cannon_controller.counter_C.n17 ), 
    .F1(\c_controller.cannon_controller.counter_C.n73[0] ), 
    .COUT1(\c_controller.cannon_controller.counter_C.n1853 ), 
    .COUT0(\c_controller.cannon_controller.counter_C.n2575 ));
  c_controller_cannon_controller_counter_C_SLICE_8 
    \c_controller.cannon_controller.counter_C.SLICE_8 ( 
    .DI1(\c_controller.cannon_controller.counter_C.n73[14] ), 
    .DI0(\c_controller.cannon_controller.counter_C.n73[13] ), 
    .D1(\c_controller.cannon_controller.counter_C.n2596 ), 
    .C1(\c_controller.cannon_controller.NEScount[5] ), 
    .D0(\c_controller.cannon_controller.counter_C.n1865 ), 
    .C0(\c_controller.cannon_controller.NEScount[4] ), 
    .CLK(\c_controller.cannon_controller.clk_d ), 
    .CIN0(\c_controller.cannon_controller.counter_C.n1865 ), 
    .CIN1(\c_controller.cannon_controller.counter_C.n2596 ), 
    .Q0(\c_controller.cannon_controller.NEScount[4] ), 
    .Q1(\c_controller.cannon_controller.NEScount[5] ), 
    .F0(\c_controller.cannon_controller.counter_C.n73[13] ), 
    .F1(\c_controller.cannon_controller.counter_C.n73[14] ), 
    .COUT1(\c_controller.cannon_controller.counter_C.n1867 ), 
    .COUT0(\c_controller.cannon_controller.counter_C.n2596 ));
  SLICE_9 SLICE_9( .DI0(n38), .D1(n2608), .D0(n1877), .C0(\g_count[7] ), 
    .CLK(g_clk_c), .CIN0(n1877), .CIN1(n2608), .Q0(\g_count[7] ), .F0(n38), 
    .COUT0(n2608));
  SLICE_10 SLICE_10( .DI1(n39), .DI0(n40), .D1(n2605), .C1(\g_count[6] ), 
    .D0(n1875), .C0(\g_count[5] ), .CLK(g_clk_c), .CIN0(n1875), .CIN1(n2605), 
    .Q0(\g_count[5] ), .Q1(\g_count[6] ), .F0(n40), .F1(n39), .COUT1(n1877), 
    .COUT0(n2605));
  SLICE_11 SLICE_11( .DI1(n41), .DI0(n42), .D1(n2602), .C1(\g_count[4] ), 
    .D0(n1873), .C0(\g_count[3] ), .CLK(g_clk_c), .CIN0(n1873), .CIN1(n2602), 
    .Q0(\g_count[3] ), .Q1(\g_count[4] ), .F0(n42), .F1(n41), .COUT1(n1875), 
    .COUT0(n2602));
  SLICE_12 SLICE_12( .DI1(n43), .DI0(n44), .D1(n2572), .C1(\g_count[2] ), 
    .D0(n1871), .C0(\g_count[1] ), .CLK(g_clk_c), .CIN0(n1871), .CIN1(n2572), 
    .Q0(\g_count[1] ), .Q1(\g_count[2] ), .F0(n44), .F1(n43), .COUT1(n1873), 
    .COUT0(n2572));
  SLICE_13 SLICE_13( .DI1(n45), .D1(n2569), .C1(\g_count[0] ), .B1(VCC_net), 
    .CLK(g_clk_c), .CIN1(n2569), .Q1(\g_count[0] ), .F1(n45), .COUT1(n1871), 
    .COUT0(n2569));
  c_controller_cannon_controller_SLICE_14 
    \c_controller.cannon_controller.SLICE_14 ( 
    .DI1(\c_controller.cannon_controller.temp[5].sig_001.FeedThruLUT ), 
    .DI0(\c_controller.cannon_controller.temp[6].sig_000.FeedThruLUT ), 
    .B1(\c_controller.cannon_controller.temp[5] ), 
    .C0(\c_controller.cannon_controller.temp[6] ), 
    .CE(\c_controller.cannon_controller.temp_7__N_160 ), 
    .CLK(\c_controller.cannon_controller.NESclk ), .Q0(fire_tmp), 
    .Q1(\c_controller.cannon_controller.temp[6] ), 
    .F0(\c_controller.cannon_controller.temp[6].sig_000.FeedThruLUT ), 
    .F1(\c_controller.cannon_controller.temp[5].sig_001.FeedThruLUT ));
  c_controller_cannon_controller_SLICE_16 
    \c_controller.cannon_controller.SLICE_16 ( 
    .DI1(\c_controller.cannon_controller.temp[3].sig_003.FeedThruLUT ), 
    .DI0(\c_controller.cannon_controller.temp[4].sig_002.FeedThruLUT ), 
    .B1(\c_controller.cannon_controller.temp[3] ), 
    .A0(\c_controller.cannon_controller.temp[4] ), 
    .CE(\c_controller.cannon_controller.temp_7__N_160 ), 
    .CLK(\c_controller.cannon_controller.NESclk ), 
    .Q0(\c_controller.cannon_controller.temp[5] ), 
    .Q1(\c_controller.cannon_controller.temp[4] ), 
    .F0(\c_controller.cannon_controller.temp[4].sig_002.FeedThruLUT ), 
    .F1(\c_controller.cannon_controller.temp[3].sig_003.FeedThruLUT ));
  c_controller_cannon_controller_SLICE_18 
    \c_controller.cannon_controller.SLICE_18 ( 
    .DI1(\c_controller.move_right.sig_005.FeedThruLUT ), 
    .DI0(\c_controller.cannon_controller.temp[2].sig_004.FeedThruLUT ), 
    .A1(\c_controller.move_right ), 
    .C0(\c_controller.cannon_controller.temp[2] ), 
    .CE(\c_controller.cannon_controller.temp_7__N_160 ), 
    .CLK(\c_controller.cannon_controller.NESclk ), 
    .Q0(\c_controller.cannon_controller.temp[3] ), 
    .Q1(\c_controller.cannon_controller.temp[2] ), 
    .F0(\c_controller.cannon_controller.temp[2].sig_004.FeedThruLUT ), 
    .F1(\c_controller.move_right.sig_005.FeedThruLUT ));
  c_controller_SLICE_20 \c_controller.SLICE_20 ( 
    .DI0(\c_controller.move_left.sig_006.FeedThruLUT ), 
    .D0(\c_controller.move_left ), 
    .CE(\c_controller.cannon_controller.temp_7__N_160 ), 
    .CLK(\c_controller.cannon_controller.NESclk ), 
    .Q0(\c_controller.move_right ), 
    .F0(\c_controller.move_left.sig_006.FeedThruLUT ));
  SLICE_21 SLICE_21( .DI1(\b_nxt_row[12].sig_049.FeedThruLUT ), 
    .DI0(\b_nxt_row[13].sig_007.FeedThruLUT ), .C1(\b_nxt_row[12] ), 
    .D0(\b_nxt_row[13] ), .CE(n1423), .LSR(n1540), .CLK(g_clk_c), 
    .Q0(\b_wr[13] ), .Q1(\b_wr[12] ), .F0(\b_nxt_row[13].sig_007.FeedThruLUT ), 
    .F1(\b_nxt_row[12].sig_049.FeedThruLUT ));
  SLICE_22 SLICE_22( .DI1(\b_nxt_row[15].sig_009.FeedThruLUT ), 
    .DI0(\b_nxt_row[14].sig_008.FeedThruLUT ), .C1(\b_nxt_row[15] ), 
    .B0(\b_nxt_row[14] ), .CE(n1423), .LSR(n1540), .CLK(g_clk_c), 
    .Q0(\b_wr[14] ), .Q1(\b_wr[15] ), .F0(\b_nxt_row[14].sig_008.FeedThruLUT ), 
    .F1(\b_nxt_row[15].sig_009.FeedThruLUT ));
  SLICE_24 SLICE_24( .DI1(\b_nxt_row[5].sig_012.FeedThruLUT ), 
    .DI0(\b_nxt_row[4].sig_010.FeedThruLUT ), .C1(\b_nxt_row[5] ), 
    .D0(\b_nxt_row[4] ), .CE(n1423), .LSR(n1540), .CLK(g_clk_c), 
    .Q0(\b_wr[4] ), .Q1(\b_wr[5] ), .F0(\b_nxt_row[4].sig_010.FeedThruLUT ), 
    .F1(\b_nxt_row[5].sig_012.FeedThruLUT ));
  SLICE_25 SLICE_25( .DI1(\b_nxt_row[17].sig_014.FeedThruLUT ), 
    .DI0(\b_nxt_row[16].sig_011.FeedThruLUT ), .D1(\b_nxt_row[17] ), 
    .A0(\b_nxt_row[16] ), .CE(n1423), .LSR(n1540), .CLK(g_clk_c), 
    .Q0(\b_wr[16] ), .Q1(\b_wr[17] ), .F0(\b_nxt_row[16].sig_011.FeedThruLUT ), 
    .F1(\b_nxt_row[17].sig_014.FeedThruLUT ));
  SLICE_26 SLICE_26( .DI1(n2021), .DI0(n2025), .D1(n39_adj_179), 
    .C1(\b_count[0] ), .B1(\b_count[1] ), .A1(n1671), .D0(b_clk), 
    .C0(n39_adj_179), .B0(\b_count[0] ), .A0(game_over_N_102), .CE(n824), 
    .CLK(g_clk_c), .Q0(\b_count[0] ), .Q1(\b_count[1] ), .F0(n2025), 
    .F1(n2021));
  SLICE_27 SLICE_27( .DI1(\n939$n3 ), .DI0(\n940$n0 ), .D1(n934), 
    .C1(\b_count[1] ), .A1(n824), .D0(\b_count[0] ), .C0(n935), .B0(n824), 
    .CLK(g_clk_c), .Q0(n935), .Q1(n934), .F0(\n940$n0 ), .F1(\n939$n3 ));
  SLICE_29 SLICE_29( .DI1(\b_count[1].sig_038.FeedThruLUT ), 
    .DI0(\b_count[0].sig_013.FeedThruLUT ), .B1(\b_count[1] ), 
    .B0(\b_count[0] ), .CE(n824), .CLK(g_clk_c), .Q0(\b_addr[0] ), 
    .Q1(\b_addr[1] ), .F0(\b_count[0].sig_013.FeedThruLUT ), 
    .F1(\b_count[1].sig_038.FeedThruLUT ));
  SLICE_31 SLICE_31( .DI1(\b_nxt_row[19].sig_040.FeedThruLUT ), 
    .DI0(\b_nxt_row[18].sig_015.FeedThruLUT ), .A1(\b_nxt_row[19] ), 
    .A0(\b_nxt_row[18] ), .CE(n1423), .LSR(n1540), .CLK(g_clk_c), 
    .Q0(\b_wr[18] ), .Q1(\b_wr[19] ), .F0(\b_nxt_row[18].sig_015.FeedThruLUT ), 
    .F1(\b_nxt_row[19].sig_040.FeedThruLUT ));
  b_generator_SLICE_32 \b_generator.SLICE_32 ( 
    .DI1(\b_nxt_row[19].sig_016.FeedThruLUT ), .DI0(\b_generator.i_19__N_127 ), 
    .B1(\b_nxt_row[19] ), .D0(\b_generator.n33 ), .C0(\b_generator.n36 ), 
    .B0(\b_generator.n35 ), .A0(\b_generator.n34 ), .CLK(b_clk), 
    .Q0(\b_nxt_row[19] ), .Q1(\b_nxt_row[18] ), .F0(\b_generator.i_19__N_127 ), 
    .F1(\b_nxt_row[19].sig_016.FeedThruLUT ));
  SLICE_34 SLICE_34( .DI1(\b_nxt_row[17].sig_018.FeedThruLUT ), 
    .DI0(\b_nxt_row[18].sig_017.FeedThruLUT ), .D1(\b_nxt_row[17] ), 
    .A0(\b_nxt_row[18] ), .CLK(b_clk), .Q0(\b_nxt_row[17] ), 
    .Q1(\b_nxt_row[16] ), .F0(\b_nxt_row[18].sig_017.FeedThruLUT ), 
    .F1(\b_nxt_row[17].sig_018.FeedThruLUT ));
  SLICE_36 SLICE_36( .DI1(\b_nxt_row[15].sig_020.FeedThruLUT ), 
    .DI0(\b_nxt_row[16].sig_019.FeedThruLUT ), .A1(\b_nxt_row[15] ), 
    .B0(\b_nxt_row[16] ), .CLK(b_clk), .Q0(\b_nxt_row[15] ), 
    .Q1(\b_nxt_row[14] ), .F0(\b_nxt_row[16].sig_019.FeedThruLUT ), 
    .F1(\b_nxt_row[15].sig_020.FeedThruLUT ));
  SLICE_38 SLICE_38( .DI1(\b_nxt_row[13].sig_022.FeedThruLUT ), 
    .DI0(\b_nxt_row[14].sig_021.FeedThruLUT ), .D1(\b_nxt_row[13] ), 
    .D0(\b_nxt_row[14] ), .CLK(b_clk), .Q0(\b_nxt_row[13] ), 
    .Q1(\b_nxt_row[12] ), .F0(\b_nxt_row[14].sig_021.FeedThruLUT ), 
    .F1(\b_nxt_row[13].sig_022.FeedThruLUT ));
  SLICE_40 SLICE_40( .DI1(\b_nxt_row[11].sig_024.FeedThruLUT ), 
    .DI0(\b_nxt_row[12].sig_023.FeedThruLUT ), .C1(\b_nxt_row[11] ), 
    .D0(\b_nxt_row[12] ), .CLK(b_clk), .Q0(\b_nxt_row[11] ), 
    .Q1(\b_nxt_row[10] ), .F0(\b_nxt_row[12].sig_023.FeedThruLUT ), 
    .F1(\b_nxt_row[11].sig_024.FeedThruLUT ));
  SLICE_42 SLICE_42( .DI1(\b_nxt_row[9].sig_026.FeedThruLUT ), 
    .DI0(\b_nxt_row[10].sig_025.FeedThruLUT ), .D1(\b_nxt_row[9] ), 
    .D0(\b_nxt_row[10] ), .CLK(b_clk), .Q0(\b_nxt_row[9] ), 
    .Q1(\b_nxt_row[8] ), .F0(\b_nxt_row[10].sig_025.FeedThruLUT ), 
    .F1(\b_nxt_row[9].sig_026.FeedThruLUT ));
  SLICE_44 SLICE_44( .DI1(\b_nxt_row[7].sig_028.FeedThruLUT ), 
    .DI0(\b_nxt_row[8].sig_027.FeedThruLUT ), .D1(\b_nxt_row[7] ), 
    .A0(\b_nxt_row[8] ), .CLK(b_clk), .Q0(\b_nxt_row[7] ), .Q1(\b_nxt_row[6] ), 
    .F0(\b_nxt_row[8].sig_027.FeedThruLUT ), 
    .F1(\b_nxt_row[7].sig_028.FeedThruLUT ));
  SLICE_46 SLICE_46( .DI1(\b_nxt_row[5].sig_030.FeedThruLUT ), 
    .DI0(\b_nxt_row[6].sig_029.FeedThruLUT ), .D1(\b_nxt_row[5] ), 
    .A0(\b_nxt_row[6] ), .CLK(b_clk), .Q0(\b_nxt_row[5] ), .Q1(\b_nxt_row[4] ), 
    .F0(\b_nxt_row[6].sig_029.FeedThruLUT ), 
    .F1(\b_nxt_row[5].sig_030.FeedThruLUT ));
  SLICE_48 SLICE_48( .DI1(\b_nxt_row[3].sig_032.FeedThruLUT ), 
    .DI0(\b_nxt_row[4].sig_031.FeedThruLUT ), .C1(\b_nxt_row[3] ), 
    .A0(\b_nxt_row[4] ), .CLK(b_clk), .Q0(\b_nxt_row[3] ), .Q1(\b_nxt_row[2] ), 
    .F0(\b_nxt_row[4].sig_031.FeedThruLUT ), 
    .F1(\b_nxt_row[3].sig_032.FeedThruLUT ));
  SLICE_50 SLICE_50( .DI1(\b_nxt_row[1].sig_034.FeedThruLUT ), 
    .DI0(\b_nxt_row[2].sig_033.FeedThruLUT ), .D1(\b_nxt_row[1] ), 
    .C0(\b_nxt_row[2] ), .CLK(b_clk), .Q0(\b_nxt_row[1] ), .Q1(\b_nxt_row[0] ), 
    .F0(\b_nxt_row[2].sig_033.FeedThruLUT ), 
    .F1(\b_nxt_row[1].sig_034.FeedThruLUT ));
  SLICE_52 SLICE_52( .DI1(\b_nxt_row[7].sig_039.FeedThruLUT ), 
    .DI0(\b_nxt_row[6].sig_035.FeedThruLUT ), .D1(\b_nxt_row[7] ), 
    .A0(\b_nxt_row[6] ), .CE(n1423), .LSR(n1540), .CLK(g_clk_c), 
    .Q0(\b_wr[6] ), .Q1(\b_wr[7] ), .F0(\b_nxt_row[6].sig_035.FeedThruLUT ), 
    .F1(\b_nxt_row[7].sig_039.FeedThruLUT ));
  SLICE_53 SLICE_53( .DI1(\b_count[2].sig_037.FeedThruLUT ), 
    .DI0(\b_count[3].sig_036.FeedThruLUT ), .C1(\b_count[2] ), 
    .B0(\b_count[3] ), .CE(n824), .CLK(g_clk_c), .Q0(\b_addr[3] ), 
    .Q1(\b_addr[2] ), .F0(\b_count[3].sig_036.FeedThruLUT ), 
    .F1(\b_count[2].sig_037.FeedThruLUT ));
  SLICE_56 SLICE_56( .DI1(\n938$n2 ), .DI0(\n937$n1 ), .D1(n933), .C1(n824), 
    .B1(\b_count[2] ), .D0(n824), .B0(n932), .A0(\b_count[3] ), .CLK(g_clk_c), 
    .Q0(n932), .Q1(n933), .F0(\n937$n1 ), .F1(\n938$n2 ));
  SLICE_60 SLICE_60( .DI1(n2023), .DI0(n2027), .D1(\b_count[2] ), .C1(n4), 
    .B1(game_over_N_102), .A1(b_clk), .D0(n4), .C0(n1671), .B0(\b_count[3] ), 
    .A0(\b_count[2] ), .CE(n824), .CLK(g_clk_c), .Q0(\b_count[3] ), 
    .Q1(\b_count[2] ), .F0(n2027), .F1(n2023));
  SLICE_64 SLICE_64( .DI1(\b_nxt_row[10].sig_048.FeedThruLUT ), 
    .DI0(\b_nxt_row[11].sig_041.FeedThruLUT ), .D1(\b_nxt_row[10] ), 
    .C0(\b_nxt_row[11] ), .CE(n1423), .LSR(n1540), .CLK(g_clk_c), 
    .Q0(\b_wr[11] ), .Q1(\b_wr[10] ), .F0(\b_nxt_row[11].sig_041.FeedThruLUT ), 
    .F1(\b_nxt_row[10].sig_048.FeedThruLUT ));
  SLICE_65 SLICE_65( .DI1(\b_nxt_row[0].sig_043.FeedThruLUT ), 
    .DI0(\b_nxt_row[1].sig_042.FeedThruLUT ), .D1(\b_nxt_row[0] ), 
    .C0(\b_nxt_row[1] ), .CE(n1423), .LSR(n1540), .CLK(g_clk_c), 
    .Q0(\b_wr[1] ), .Q1(\b_wr[0] ), .F0(\b_nxt_row[1].sig_042.FeedThruLUT ), 
    .F1(\b_nxt_row[0].sig_043.FeedThruLUT ));
  SLICE_67 SLICE_67( .DI1(\b_nxt_row[9].sig_045.FeedThruLUT ), 
    .DI0(\b_nxt_row[8].sig_044.FeedThruLUT ), .C1(\b_nxt_row[9] ), 
    .A0(\b_nxt_row[8] ), .CE(n1423), .LSR(n1540), .CLK(g_clk_c), 
    .Q0(\b_wr[8] ), .Q1(\b_wr[9] ), .F0(\b_nxt_row[8].sig_044.FeedThruLUT ), 
    .F1(\b_nxt_row[9].sig_045.FeedThruLUT ));
  SLICE_69 SLICE_69( .DI1(\b_nxt_row[3].sig_047.FeedThruLUT ), 
    .DI0(\b_nxt_row[2].sig_046.FeedThruLUT ), .A1(\b_nxt_row[3] ), 
    .A0(\b_nxt_row[2] ), .CE(n1423), .LSR(n1540), .CLK(g_clk_c), 
    .Q0(\b_wr[2] ), .Q1(\b_wr[3] ), .F0(\b_nxt_row[2].sig_046.FeedThruLUT ), 
    .F1(\b_nxt_row[3].sig_047.FeedThruLUT ));
  c_controller_SLICE_73 \c_controller.SLICE_73 ( .D1(\c_pos[0] ), 
    .C1(\c_controller.n8 ), .B1(\c_controller.move_right ), .A1(\c_pos[3] ), 
    .D0(\c_pos[2] ), .C0(\c_pos[1] ), .B0(\c_pos[4] ), .F0(\c_controller.n8 ), 
    .F1(\c_controller.n915 ));
  c_controller_SLICE_74 \c_controller.SLICE_74 ( .D1(\c_controller.n915 ), 
    .C1(\c_pos[3] ), .B1(\c_pos[4] ), .A1(\c_controller.n6 ), .D0(\c_pos[3] ), 
    .C0(\c_controller.n6 ), .A0(\c_controller.n915 ), .F0(\c_pos[3] ), 
    .F1(\c_pos[4] ));
  c_controller_SLICE_75 \c_controller.SLICE_75 ( .D1(\c_controller.move_left ), 
    .C1(\c_controller.n8_adj_178 ), .B1(\c_pos[0] ), .A1(\c_pos[3] ), 
    .D0(\c_pos[2] ), .B0(\c_pos[4] ), .A0(\c_pos[1] ), 
    .F0(\c_controller.n8_adj_178 ), .F1(\c_controller.pos_tmp_4__N_147 ));
  c_controller_SLICE_76 \c_controller.SLICE_76 ( .D1(\c_pos[1] ), 
    .C1(\b_rd[19] ), .B1(\c_pos[0] ), .A1(\b_rd[18] ), 
    .C0(\c_controller.n915 ), .B0(\c_controller.pos_tmp_4__N_147 ), 
    .A0(\c_pos[0] ), .F0(\c_pos[0] ), .F1(n2391));
  c_controller_SLICE_77 \c_controller.SLICE_77 ( .D1(\c_pos[2] ), 
    .C1(\c_controller.n2 ), .B1(\c_controller.n915 ), .A1(\c_pos[1] ), 
    .C0(\c_pos[0] ), .B0(\c_controller.n915 ), 
    .A0(\c_controller.pos_tmp_4__N_147 ), .F0(\c_controller.n2 ), 
    .F1(\c_controller.n6 ));
  c_controller_SLICE_78 \c_controller.SLICE_78 ( .D1(\c_pos[0] ), 
    .C1(\c_controller.pos_tmp_4__N_147 ), .B1(\c_pos[1] ), 
    .A1(\c_controller.n915 ), .D0(\c_controller.n915 ), .C0(\c_controller.n2 ), 
    .B0(\c_pos[2] ), .A0(\c_pos[1] ), .F0(\c_pos[2] ), .F1(\c_pos[1] ));
  SLICE_79 SLICE_79( .D1(\b_rd[1] ), .C1(n2385), .B1(\c_pos[1] ), 
    .A1(\b_rd[0] ), .D0(\b_rd[3] ), .C0(\c_pos[0] ), .B0(\b_rd[2] ), 
    .A0(\c_pos[1] ), .F0(n2385), .F1(n2215));
  SLICE_82 SLICE_82( .C1(n818), .B1(b_clk), .A1(game_over_N_102), 
    .D0(\c_pos[4] ), .C0(n2228), .B0(fire_tmp), .A0(n2376), .F0(n818), 
    .F1(n1423));
  SLICE_83 SLICE_83( .D1(\c_pos[3] ), .C1(n2394), .A1(\c_pos[2] ), 
    .D0(\c_pos[1] ), .C0(n2391), .B0(\b_rd[17] ), .A0(\b_rd[16] ), .F0(n2394), 
    .F1(n2228));
  SLICE_85 SLICE_85( .D1(\c_pos[1] ), .C1(n2361), .B1(\b_rd[12] ), 
    .A1(\b_rd[13] ), .D0(\c_pos[0] ), .C0(\c_pos[1] ), .B0(\b_rd[15] ), 
    .A0(\b_rd[14] ), .F0(n2361), .F1(n2364));
  SLICE_87 SLICE_87( .D1(\b_rd[8] ), .C1(n2367), .B1(\c_pos[1] ), 
    .A1(\b_rd[9] ), .D0(\c_pos[0] ), .C0(\b_rd[10] ), .B0(\c_pos[1] ), 
    .A0(\b_rd[11] ), .F0(n2367), .F1(n2370));
  SLICE_89 SLICE_89( .D0(\c_pos[3] ), .C0(n2215), .B0(n2218), .A0(n2373), 
    .F0(n2376));
  SLICE_90 SLICE_90( .D0(\c_pos[3] ), .C0(n2364), .B0(n2370), .A0(\c_pos[2] ), 
    .F0(n2373));
  SLICE_91 SLICE_91( .D1(\b_rd[5] ), .C1(n2379), .B1(\b_rd[4] ), 
    .A1(\c_pos[1] ), .D0(\c_pos[1] ), .C0(\b_rd[6] ), .B0(\c_pos[0] ), 
    .A0(\b_rd[7] ), .F0(n2379), .F1(n2218));
  c_controller_cannon_controller_SLICE_93 
    \c_controller.cannon_controller.SLICE_93 ( 
    .D1(\c_controller.cannon_controller.NEScount[7] ), 
    .C1(\c_controller.cannon_controller.n6 ), 
    .B1(\c_controller.cannon_controller.NEScount[6] ), 
    .A1(\c_controller.cannon_controller.NEScount[5] ), 
    .C0(\c_controller.cannon_controller.NEScount[3] ), 
    .A0(\c_controller.cannon_controller.NEScount[4] ), 
    .F0(\c_controller.cannon_controller.n6 ), 
    .F1(\c_controller.cannon_controller.temp_7__N_160 ));
  SLICE_95 SLICE_95( .D1(n818), .C1(b_clk), .B1(game_over_N_102), .D0(b_clk), 
    .C0(game_over_N_102), .F0(n1671), .F1(n1540));
  SLICE_96 SLICE_96( .D1(n1671), .C1(n39_adj_179), .B1(\b_count[1] ), 
    .A1(\b_count[0] ), .D0(n34), .C0(n36), .B0(n33), .A0(n35), 
    .F0(n39_adj_179), .F1(n4));
  SLICE_97 SLICE_97( .D1(n934), .C1(n824), .A1(\b_count[1] ), .C0(n824), 
    .B0(\b_count[0] ), .A0(n935), .F0(n940), .F1(n939));
  SLICE_98 SLICE_98( .D1(fire_tmp), .C1(game_over_N_102), .A1(b_clk), 
    .D0(\b_count[0] ), .C0(\b_count[3] ), .B0(\b_count[1] ), .A0(\b_count[2] ), 
    .F0(game_over_N_102), .F1(n824));
  b_generator_SLICE_99 \b_generator.SLICE_99 ( .D1(\b_generator.n22 ), 
    .C1(\b_generator.n32 ), .B1(\b_nxt_row[7] ), .A1(\b_nxt_row[18] ), 
    .D0(\b_nxt_row[9] ), .C0(\b_nxt_row[6] ), .B0(\b_nxt_row[14] ), 
    .A0(\b_nxt_row[0] ), .F0(\b_generator.n32 ), .F1(\b_generator.n36 ));
  b_generator_SLICE_100 \b_generator.SLICE_100 ( .D1(\b_nxt_row[1] ), 
    .C1(\b_nxt_row[8] ), .B1(\b_nxt_row[13] ), .A1(\b_nxt_row[17] ), 
    .C0(\b_nxt_row[16] ), .B0(\b_nxt_row[3] ), .F0(\b_generator.n22 ), 
    .F1(\b_generator.n33 ));
  SLICE_102 SLICE_102( .D1(\b_rd[7] ), .C1(n32), .B1(\b_rd[18] ), .A1(n22), 
    .D0(\b_rd[6] ), .C0(\b_rd[0] ), .B0(\b_rd[14] ), .A0(\b_rd[9] ), .F0(n32), 
    .F1(n36));
  SLICE_105 SLICE_105( .D1(\g_count[0] ), .C1(n14), .B1(\g_count[3] ), 
    .A1(n10), .D0(\g_count[7] ), .C0(\g_count[4] ), .B0(\g_count[1] ), 
    .A0(\g_count[5] ), .F0(n14), .F1(b_clk));
  SLICE_111 SLICE_111( .D1(\b_rd[1] ), .C1(\b_rd[13] ), .B1(\b_rd[17] ), 
    .A1(\b_rd[8] ), .C0(\b_rd[3] ), .A0(\b_rd[16] ), .F0(n22), .F1(n33));
  SLICE_114 SLICE_114( .D1(\b_rd[19] ), .C1(\b_rd[4] ), .B1(\b_rd[10] ), 
    .A1(\b_rd[5] ), .D0(\b_rd[11] ), .C0(\b_rd[2] ), .B0(\b_rd[15] ), 
    .A0(\b_rd[12] ), .F0(n35), .F1(n34));
  SLICE_115 SLICE_115( .F0(VCC_net));
  SLICE_117 SLICE_117( .C1(n932), .B1(\b_count[3] ), .A1(n824), .D0(n824), 
    .C0(\b_count[2] ), .A0(n933), .F0(n938), .F1(n937));
  b_generator_SLICE_120 \b_generator.SLICE_120 ( .D0(\b_nxt_row[12] ), 
    .C0(\b_nxt_row[11] ), .B0(\b_nxt_row[2] ), .A0(\b_nxt_row[15] ), 
    .F0(\b_generator.n35 ));
  b_generator_SLICE_121 \b_generator.SLICE_121 ( .D0(\b_nxt_row[19] ), 
    .C0(\b_nxt_row[4] ), .B0(\b_nxt_row[10] ), .A0(\b_nxt_row[5] ), 
    .F0(\b_generator.n34 ));
  SLICE_126 SLICE_126( .D0(\g_count[2] ), .B0(\g_count[6] ), .F0(n10));
  c_controller_cannon_controller_HSOSC_C 
    \c_controller.cannon_controller.HSOSC_C ( .CLKHFPU(VCC_net), 
    .CLKHFEN(VCC_net), .CLKHF(\c_controller.cannon_controller.clk_d ));
  c_controller_cannon_controller_temp__i1 
    \c_controller.cannon_controller.temp__i1 ( .PADDI(data_c), 
    .CE(\c_controller.cannon_controller.temp_7__N_160 ), 
    .INCLK(\c_controller.cannon_controller.NESclk ), 
    .DI0(\c_controller.move_left ));
  game_over_i0 game_over_i0( .DO0(game_over_N_102), .CE(b_clk), 
    .OUTCLK(g_clk_c), .PADDO(game_over_c));
  b_mem_mem0 \b_mem.mem0 ( .RADDR3(n937), .RADDR2(n938), .RADDR1(n939), 
    .RADDR0(n940), .WADDR3(\b_addr[3] ), .WADDR2(\b_addr[2] ), 
    .WADDR1(\b_addr[1] ), .WADDR0(\b_addr[0] ), .WDATA15(\b_wr[15] ), 
    .WDATA14(\b_wr[14] ), .WDATA13(\b_wr[13] ), .WDATA12(\b_wr[12] ), 
    .WDATA11(\b_wr[11] ), .WDATA10(\b_wr[10] ), .WDATA9(\b_wr[9] ), 
    .WDATA8(\b_wr[8] ), .WDATA7(\b_wr[7] ), .WDATA6(\b_wr[6] ), 
    .WDATA5(\b_wr[5] ), .WDATA4(\b_wr[4] ), .WDATA3(\b_wr[3] ), 
    .WDATA2(\b_wr[2] ), .WDATA1(\b_wr[1] ), .WDATA0(\b_wr[0] ), 
    .RCLKE(VCC_net), .RCLK(g_clk_c), .RE(VCC_net), .WCLKE(VCC_net), 
    .WCLK(g_clk_c), .RDATA15(\b_rd[15] ), .RDATA14(\b_rd[14] ), 
    .RDATA13(\b_rd[13] ), .RDATA12(\b_rd[12] ), .RDATA11(\b_rd[11] ), 
    .RDATA10(\b_rd[10] ), .RDATA9(\b_rd[9] ), .RDATA8(\b_rd[8] ), 
    .RDATA7(\b_rd[7] ), .RDATA6(\b_rd[6] ), .RDATA5(\b_rd[5] ), 
    .RDATA4(\b_rd[4] ), .RDATA3(\b_rd[3] ), .RDATA2(\b_rd[2] ), 
    .RDATA1(\b_rd[1] ), .RDATA0(\b_rd[0] ));
  b_mem_mem1 \b_mem.mem1 ( .RADDR3(n937), .RADDR2(n938), .RADDR1(n939), 
    .RADDR0(n940), .WADDR3(\b_addr[3] ), .WADDR2(\b_addr[2] ), 
    .WADDR1(\b_addr[1] ), .WADDR0(\b_addr[0] ), .WDATA3(\b_wr[19] ), 
    .WDATA2(\b_wr[18] ), .WDATA1(\b_wr[17] ), .WDATA0(\b_wr[16] ), 
    .RCLKE(VCC_net), .RCLK(g_clk_c), .RE(VCC_net), .WCLKE(VCC_net), 
    .WCLK(g_clk_c), .RDATA3(\b_rd[19] ), .RDATA2(\b_rd[18] ), 
    .RDATA1(\b_rd[17] ), .RDATA0(\b_rd[16] ));
  g_clk g_clk_I( .PADDI(g_clk_c), .g_clk(g_clk));
  data data_I( .PADDI(data_c), .data(data));
  game_over game_over_I( .PADDO(game_over_c), .game_over(game_over));
endmodule

module c_controller_cannon_controller_counter_C_SLICE_0 ( input DI1, DI0, D1, 
    C1, D0, C0, CLK, CIN0, CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  fa2 \c_controller/cannon_controller/counter_C/i_189_add_4_13 ( .A0(GNDI), 
    .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), 
    .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i12 ( .D0(DI0_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i13 ( .D0(DI1_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module fa2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI0, CI1, output S0, S1, 
    CO0, CO1 );

  FA2 inst1( .A0(A0), .B0(B0), .C0(C0), .D0(D0), .CI0(CI0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .CI1(CI1), .CO0(CO0), .CO1(CO1), .S0(S0), .S1(S1));
  defparam inst1.INIT0 = "0xc33c";
  defparam inst1.INIT1 = "0xc33c";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module ffsre2 ( input D0, SP, CK, LSR, output Q );

  FD1P3XZ INST01( .D(D0), .SP(SP), .CK(CK), .SR(LSR), .Q(Q));
  defparam INST01.REGSET = "RESET";
  defparam INST01.SRMODE = "CE_OVER_LSR";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module c_controller_cannon_controller_counter_C_SLICE_1 ( input DI1, DI0, D1, 
    C1, D0, C0, CLK, CIN0, CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  fa2 \c_controller/cannon_controller/counter_C/i_189_add_4_11 ( .A0(GNDI), 
    .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), 
    .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i10 ( .D0(DI0_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i11 ( .D0(DI1_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module c_controller_cannon_controller_counter_C_SLICE_2 ( input DI1, DI0, D1, 
    C1, D0, C0, CLK, CIN0, CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  fa2 \c_controller/cannon_controller/counter_C/i_189_add_4_9 ( .A0(GNDI), 
    .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), 
    .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i8 ( .D0(DI0_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i9 ( .D0(DI1_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module c_controller_cannon_controller_counter_C_SLICE_3 ( input DI1, DI0, D1, 
    C1, D0, C0, CLK, CIN0, CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  fa2 \c_controller/cannon_controller/counter_C/i_189_add_4_7 ( .A0(GNDI), 
    .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), 
    .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i6 ( .D0(DI0_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i7 ( .D0(DI1_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module c_controller_cannon_controller_counter_C_SLICE_4 ( input DI1, DI0, D1, 
    C1, D0, C0, CLK, CIN0, CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  fa2 \c_controller/cannon_controller/counter_C/i_189_add_4_5 ( .A0(GNDI), 
    .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), 
    .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i4 ( .D0(DI0_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i5 ( .D0(DI1_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module c_controller_cannon_controller_counter_C_SLICE_5 ( input DI1, DI0, D1, 
    C1, D0, C0, CLK, CIN0, CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  fa2 \c_controller/cannon_controller/counter_C/i_189_add_4_3 ( .A0(GNDI), 
    .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), 
    .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i2 ( .D0(DI0_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i3 ( .D0(DI1_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module c_controller_cannon_controller_counter_C_SLICE_6 ( input DI1, DI0, D1, 
    C1, D0, C0, CLK, CIN0, CIN1, output Q0, Q1, F0, F1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  fa2 \c_controller/cannon_controller/counter_C/i_189_add_4_17 ( .A0(GNDI), 
    .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), 
    .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), .CO0(COUT0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i16 ( .D0(DI0_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i17 ( .D0(DI1_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module c_controller_cannon_controller_counter_C_SLICE_7 ( input DI1, D1, C1, 
    B1, CLK, CIN1, output Q1, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  fa2 \c_controller/cannon_controller/counter_C/i_189_add_4_1 ( .A0(GNDI), 
    .B0(GNDI), .C0(GNDI), .D0(VCCI), .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), 
    .CI0(VCCI), .CI1(CIN1), .S0(), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i1 ( .D0(DI1_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module c_controller_cannon_controller_counter_C_SLICE_8 ( input DI1, DI0, D1, 
    C1, D0, C0, CLK, CIN0, CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  fa2 \c_controller/cannon_controller/counter_C/i_189_add_4_15 ( .A0(GNDI), 
    .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), 
    .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i14 ( .D0(DI0_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \c_controller/cannon_controller/counter_C/i_189__i15 ( .D0(DI1_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_9 ( input DI0, D1, D0, C0, CLK, CIN0, CIN1, output Q0, F0, COUT0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  fa2 g_count_188_add_4_9( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), 
    .B1(GNDI), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(), 
    .CO0(COUT0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 g_count_188__i7( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_10 ( input DI1, DI0, D1, C1, D0, C0, CLK, CIN0, CIN1, output Q0, 
    Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  fa2 g_count_188_add_4_7( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), 
    .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 g_count_188__i5( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 g_count_188__i6( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_11 ( input DI1, DI0, D1, C1, D0, C0, CLK, CIN0, CIN1, output Q0, 
    Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  fa2 g_count_188_add_4_5( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), 
    .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 g_count_188__i3( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 g_count_188__i4( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_12 ( input DI1, DI0, D1, C1, D0, C0, CLK, CIN0, CIN1, output Q0, 
    Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  fa2 g_count_188_add_4_3( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), 
    .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 g_count_188__i1( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 g_count_188__i2( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_13 ( input DI1, D1, C1, B1, CLK, CIN1, output Q1, F1, COUT1, 
    COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  fa2 g_count_188_add_4_1( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(VCCI), 
    .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(VCCI), .CI1(CIN1), .S0(), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 g_count_188__i0( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module c_controller_cannon_controller_SLICE_14 ( input DI1, DI0, B1, C0, CE, 
    CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut4 \c_controller.cannon_controller.SLICE_14_K1 ( .A(GNDI), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40001 \c_controller.cannon_controller.SLICE_14_K0 ( .A(GNDI), .B(GNDI), 
    .C(C0), .D(GNDI), .Z(F0));
  ffsre2 \c_controller/cannon_controller/temp__i7 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  ffsre2 \c_controller/cannon_controller/temp__i8 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  LUT4 #("0xCCCC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40001 ( input A, B, C, D, output Z );

  LUT4 #("0xF0F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module c_controller_cannon_controller_SLICE_16 ( input DI1, DI0, B1, A0, CE, 
    CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut4 \c_controller.cannon_controller.SLICE_16_K1 ( .A(GNDI), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40002 \c_controller.cannon_controller.SLICE_16_K0 ( .A(A0), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 \c_controller/cannon_controller/temp__i5 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  ffsre2 \c_controller/cannon_controller/temp__i6 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40002 ( input A, B, C, D, output Z );

  LUT4 #("0xAAAA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module c_controller_cannon_controller_SLICE_18 ( input DI1, DI0, A1, C0, CE, 
    CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40003 \c_controller.cannon_controller.SLICE_18_K1 ( .A(A1), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40001 \c_controller.cannon_controller.SLICE_18_K0 ( .A(GNDI), .B(GNDI), 
    .C(C0), .D(GNDI), .Z(F0));
  ffsre2 \c_controller/cannon_controller/temp__i3 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  ffsre2 \c_controller/cannon_controller/temp__i4 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40003 ( input A, B, C, D, output Z );

  LUT4 #("0xAAAA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module c_controller_SLICE_20 ( input DI0, D0, CE, CLK, output Q0, F0 );
  wire   GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40004 \c_controller.SLICE_20_K0 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \c_controller/cannon_controller/temp__i2 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40004 ( input A, B, C, D, output Z );

  LUT4 #("0xFF00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_21 ( input DI1, DI0, C1, D0, CE, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40005 SLICE_21_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40004 SLICE_21_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 b_wr_i12( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));
  ffsre2 b_wr_i13( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40005 ( input A, B, C, D, output Z );

  LUT4 #("0xF0F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_22 ( input DI1, DI0, C1, B0, CE, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40005 SLICE_22_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40006 SLICE_22_K0( .A(GNDI), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 b_wr_i15( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));
  ffsre2 b_wr_i14( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40006 ( input A, B, C, D, output Z );

  LUT4 #("0xCCCC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_24 ( input DI1, DI0, C1, D0, CE, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40005 SLICE_24_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40004 SLICE_24_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 b_wr_i5( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));
  ffsre2 b_wr_i4( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_25 ( input DI1, DI0, D1, A0, CE, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40007 SLICE_25_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40002 SLICE_25_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 b_wr_i17( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));
  ffsre2 b_wr_i16( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40007 ( input A, B, C, D, output Z );

  LUT4 #("0xFF00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_26 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, CLK, 
    output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40008 i2_3_lut_4_lut_adj_49( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40009 i2_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 b_count_i0_i1( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 b_count_i0_i0( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40008 ( input A, B, C, D, output Z );

  LUT4 #("0x6C69") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40009 ( input A, B, C, D, output Z );

  LUT4 #("0x93C3") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_27 ( input DI1, DI0, D1, C1, A1, D0, C0, B0, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40010 SLICE_27_K1( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40011 SLICE_27_K0( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 b_addr_rep_1_i1( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 b_addr_rep_1_i0( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40010 ( input A, B, C, D, output Z );

  LUT4 #("0xF5A0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40011 ( input A, B, C, D, output Z );

  LUT4 #("0xFC30") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_29 ( input DI1, DI0, B1, B0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut4 SLICE_29_K1( .A(GNDI), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40006 SLICE_29_K0( .A(GNDI), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 b_addr_i0_i1( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  ffsre2 b_addr_i0_i0( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_31 ( input DI1, DI0, A1, A0, CE, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40003 SLICE_31_K1( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40002 SLICE_31_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 b_wr_i19( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));
  ffsre2 b_wr_i18( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module b_generator_SLICE_32 ( input DI1, DI0, B1, D0, C0, B0, A0, CLK, output 
    Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut4 \b_generator.SLICE_32_K1 ( .A(GNDI), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40012 \b_generator/i19_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \b_generator/i_i18 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \b_generator/i_i19 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40012 ( input A, B, C, D, output Z );

  LUT4 #("0x6996") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_34 ( input DI1, DI0, D1, A0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40007 SLICE_34_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40002 SLICE_34_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 \b_generator/i_i16 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \b_generator/i_i17 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_36 ( input DI1, DI0, A1, B0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40003 SLICE_36_K1( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40006 SLICE_36_K0( .A(GNDI), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 \b_generator/i_i14 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \b_generator/i_i15 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_38 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40007 SLICE_38_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40004 SLICE_38_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \b_generator/i_i12 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \b_generator/i_i13 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_40 ( input DI1, DI0, C1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40005 SLICE_40_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40004 SLICE_40_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \b_generator/i_i10 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \b_generator/i_i11 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_42 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40007 SLICE_42_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40004 SLICE_42_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \b_generator/i_i8 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \b_generator/i_i9 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_44 ( input DI1, DI0, D1, A0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40007 SLICE_44_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40002 SLICE_44_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 \b_generator/i_i6 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \b_generator/i_i7 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_46 ( input DI1, DI0, D1, A0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40007 SLICE_46_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40002 SLICE_46_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 \b_generator/i_i4 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \b_generator/i_i5 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_48 ( input DI1, DI0, C1, A0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40005 SLICE_48_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40002 SLICE_48_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 \b_generator/i_i2 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \b_generator/i_i3 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_50 ( input DI1, DI0, D1, C0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40007 SLICE_50_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40001 SLICE_50_K0( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  ffsre2 \b_generator/i_i0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \b_generator/i_i1 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_52 ( input DI1, DI0, D1, A0, CE, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40007 SLICE_52_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40002 SLICE_52_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 b_wr_i7( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));
  ffsre2 b_wr_i6( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_53 ( input DI1, DI0, C1, B0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40005 SLICE_53_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40006 SLICE_53_K0( .A(GNDI), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 b_addr_i0_i2( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  ffsre2 b_addr_i0_i3( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_56 ( input DI1, DI0, D1, C1, B1, D0, B0, A0, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40013 SLICE_56_K1( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40014 SLICE_56_K0( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 b_addr_rep_1_i2( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 b_addr_rep_1_i3( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40013 ( input A, B, C, D, output Z );

  LUT4 #("0xCFC0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40014 ( input A, B, C, D, output Z );

  LUT4 #("0xAACC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_60 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, CLK, 
    output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40015 i2_3_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40016 i2_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 b_count_i0_i2( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 b_count_i0_i3( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40015 ( input A, B, C, D, output Z );

  LUT4 #("0xD22D") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40016 ( input A, B, C, D, output Z );

  LUT4 #("0x6CC9") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_64 ( input DI1, DI0, D1, C0, CE, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40007 SLICE_64_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40001 SLICE_64_K0( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  ffsre2 b_wr_i10( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));
  ffsre2 b_wr_i11( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_65 ( input DI1, DI0, D1, C0, CE, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40007 SLICE_65_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40001 SLICE_65_K0( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  ffsre2 b_wr_i0( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));
  ffsre2 b_wr_i1( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_67 ( input DI1, DI0, C1, A0, CE, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40005 SLICE_67_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40002 SLICE_67_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 b_wr_i9( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));
  ffsre2 b_wr_i8( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_69 ( input DI1, DI0, A1, A0, CE, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40003 SLICE_69_K1( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40002 SLICE_69_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 b_wr_i3( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));
  ffsre2 b_wr_i2( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module c_controller_SLICE_73 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40017 \c_controller/i738_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40018 \c_controller/i3_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40017 ( input A, B, C, D, output Z );

  LUT4 #("0xECCC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40018 ( input A, B, C, D, output Z );

  LUT4 #("0xC000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module c_controller_SLICE_74 ( input D1, C1, B1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40019 \c_controller/i2_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40020 \c_controller/i2_3_lut_adj_48 ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40019 ( input A, B, C, D, output Z );

  LUT4 #("0xC96C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40020 ( input A, B, C, D, output Z );

  LUT4 #("0xA55A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module c_controller_SLICE_75 ( input D1, C1, B1, A1, D0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40021 \c_controller/pos_tmp_4__I_44_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40022 \c_controller/i3_3_lut_adj_45 ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40021 ( input A, B, C, D, output Z );

  LUT4 #("0x00FE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40022 ( input A, B, C, D, output Z );

  LUT4 #("0xFFEE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module c_controller_SLICE_76 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40023 \c_pos[0]_bdd_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40024 \c_controller/i2_3_lut_adj_47 ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40023 ( input A, B, C, D, output Z );

  LUT4 #("0xE2CC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40024 ( input A, B, C, D, output Z );

  LUT4 #("0x6565") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module c_controller_SLICE_77 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40025 \c_controller/i228_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40026 \c_controller/i214_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40025 ( input A, B, C, D, output Z );

  LUT4 #("0xECC8") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40026 ( input A, B, C, D, output Z );

  LUT4 #("0xF4F4") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module c_controller_SLICE_78 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40027 \c_controller.i2_3_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40028 \c_controller/i2_4_lut_adj_46 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40027 ( input A, B, C, D, output Z );

  LUT4 #("0x996C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40028 ( input A, B, C, D, output Z );

  LUT4 #("0xC96C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_79 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40029 n2385_bdd_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40030 \c_pos[0]_bdd_4_lut_5 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40029 ( input A, B, C, D, output Z );

  LUT4 #("0xF2C2") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40030 ( input A, B, C, D, output Z );

  LUT4 #("0xF858") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_82 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40031 i1_2_lut( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 i142_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40031 ( input A, B, C, D, output Z );

  LUT4 #("0xF4F4") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40032 ( input A, B, C, D, output Z );

  LUT4 #("0x3022") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_83 ( input D1, C1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40033 i1163_3_lut( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40034 n2391_bdd_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40033 ( input A, B, C, D, output Z );

  LUT4 #("0x0050") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40034 ( input A, B, C, D, output Z );

  LUT4 #("0xF0CA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_85 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40035 n2361_bdd_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40036 \c_pos[0]_bdd_4_lut_2 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40035 ( input A, B, C, D, output Z );

  LUT4 #("0xF0AC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40036 ( input A, B, C, D, output Z );

  LUT4 #("0xCFA0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_87 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40037 n2367_bdd_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40038 \c_pos[0]_bdd_4_lut_3 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40037 ( input A, B, C, D, output Z );

  LUT4 #("0xE3E0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40038 ( input A, B, C, D, output Z );

  LUT4 #("0xBBC0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_89 ( input D0, C0, B0, A0, output F0 );

  lut40039 n2373_bdd_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40039 ( input A, B, C, D, output Z );

  LUT4 #("0xAAD8") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_90 ( input D0, C0, B0, A0, output F0 );

  lut40040 \c_pos[2]_bdd_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40040 ( input A, B, C, D, output Z );

  LUT4 #("0xE4AA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_91 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40041 n2379_bdd_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40042 \c_pos[0]_bdd_4_lut_4 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40041 ( input A, B, C, D, output Z );

  LUT4 #("0xF4A4") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40042 ( input A, B, C, D, output Z );

  LUT4 #("0xB8CC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module c_controller_cannon_controller_SLICE_93 ( input D1, C1, B1, A1, C0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40043 \c_controller/cannon_controller/i1213_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40044 \c_controller/cannon_controller/i1_2_lut ( .A(A0), .B(GNDI), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40043 ( input A, B, C, D, output Z );

  LUT4 #("0x0001") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40044 ( input A, B, C, D, output Z );

  LUT4 #("0xFAFA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_95 ( input D1, C1, B1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40045 i640_2_lut( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40046 i740_2_lut( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40045 ( input A, B, C, D, output Z );

  LUT4 #("0xCF00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40046 ( input A, B, C, D, output Z );

  LUT4 #("0x0F00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_96 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40047 i256_4_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40048 i19_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40047 ( input A, B, C, D, output Z );

  LUT4 #("0x88FE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40048 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_97 ( input D1, C1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40049 mux_206_i2_3_lut( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 mux_206_i1_3_lut( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40049 ( input A, B, C, D, output Z );

  LUT4 #("0xAFA0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40050 ( input A, B, C, D, output Z );

  LUT4 #("0xCACA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_98 ( input D1, C1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40051 i1203_2_lut_3_lut( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40052 i3_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40051 ( input A, B, C, D, output Z );

  LUT4 #("0x0AFF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40052 ( input A, B, C, D, output Z );

  LUT4 #("0x2000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module b_generator_SLICE_99 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40053 \b_generator/i16_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40054 \b_generator/i12_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40053 ( input A, B, C, D, output Z );

  LUT4 #("0x6996") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40054 ( input A, B, C, D, output Z );

  LUT4 #("0x6996") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module b_generator_SLICE_100 ( input D1, C1, B1, A1, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40055 \b_generator/i13_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40056 \b_generator/i2_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40055 ( input A, B, C, D, output Z );

  LUT4 #("0x6996") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40056 ( input A, B, C, D, output Z );

  LUT4 #("0x3C3C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_102 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40057 i16_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40058 i12_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40057 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40058 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_105 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40059 i7_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40060 i6_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40059 ( input A, B, C, D, output Z );

  LUT4 #("0x8000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40060 ( input A, B, C, D, output Z );

  LUT4 #("0x8000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_111 ( input D1, C1, B1, A1, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40061 i13_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40062 i2_2_lut( .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40061 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40062 ( input A, B, C, D, output Z );

  LUT4 #("0xFAFA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_114 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40063 i14_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40064 i15_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40063 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40064 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_115 ( output F0 );
  wire   GNDI;

  lut40065 i2( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module lut40065 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_117 ( input C1, B1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40066 mux_206_i4_3_lut( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 mux_206_i3_3_lut( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40066 ( input A, B, C, D, output Z );

  LUT4 #("0xD8D8") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40067 ( input A, B, C, D, output Z );

  LUT4 #("0xF0AA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module b_generator_SLICE_120 ( input D0, C0, B0, A0, output F0 );

  lut40012 \b_generator/i15_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module b_generator_SLICE_121 ( input D0, C0, B0, A0, output F0 );

  lut40068 \b_generator/i14_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40068 ( input A, B, C, D, output Z );

  LUT4 #("0x6996") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_126 ( input D0, B0, output F0 );
  wire   GNDI;

  lut40069 i2_2_lut_adj_50( .A(GNDI), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40069 ( input A, B, C, D, output Z );

  LUT4 #("0xCC00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module c_controller_cannon_controller_HSOSC_C ( input CLKHFPU, CLKHFEN, 
    output CLKHF );
  wire   GNDI;

  HSOSC_CORE_B \c_controller.cannon_controller.HSOSC_C_HSOSC_CORE ( 
    .CLKHFPU(CLKHFPU), .CLKHFEN(CLKHFEN), .TRIM9(GNDI), .TRIM8(GNDI), 
    .TRIM7(GNDI), .TRIM6(GNDI), .TRIM5(GNDI), .TRIM4(GNDI), .TRIM3(GNDI), 
    .TRIM2(GNDI), .TRIM1(GNDI), .TRIM0(GNDI), .CLKHF(CLKHF));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module HSOSC_CORE_B ( input CLKHFPU, CLKHFEN, TRIM9, TRIM8, TRIM7, TRIM6, 
    TRIM5, TRIM4, TRIM3, TRIM2, TRIM1, TRIM0, output CLKHF );

  HSOSC_CORE INST10( .CLKHFPU(CLKHFPU), .CLKHFEN(CLKHFEN), .TRIM9(TRIM9), 
    .TRIM8(TRIM8), .TRIM7(TRIM7), .TRIM6(TRIM6), .TRIM5(TRIM5), .TRIM4(TRIM4), 
    .TRIM3(TRIM3), .TRIM2(TRIM2), .TRIM1(TRIM1), .TRIM0(TRIM0), .CLKHF(CLKHF));
  defparam INST10.CLKHF_DIV = "0b00";
  defparam INST10.FABRIC_TRIME = "DISABLE";
endmodule

module c_controller_cannon_controller_temp__i1 ( input PADDI, CE, INCLK, 
    output DI0 );
  wire   GNDI, PADDI_dly, INCLK_dly, CE_dly;

  IOL_B_B \c_controller.cannon_controller.temp__i1_IOL_B ( .PADDI(PADDI_dly), 
    .DO1(GNDI), .DO0(GNDI), .CE(CE_dly), .IOLTO(GNDI), .HOLD(GNDI), 
    .INCLK(INCLK_dly), .OUTCLK(GNDI), .PADDO(), .PADDT(), .DI1(), .DI0(DI0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (INCLK => DI0) = (0:0:0,0:0:0);
    $setuphold (posedge INCLK, PADDI, 0:0:0, 0:0:0,,,, INCLK_dly, PADDI_dly);
    $setuphold (posedge INCLK, CE, 0:0:0, 0:0:0,,,, INCLK_dly, CE_dly);
  endspecify

endmodule

module IOL_B_B ( input PADDI, DO1, DO0, CE, IOLTO, HOLD, INCLK, OUTCLK, 
    output PADDO, PADDT, DI1, DI0 );

  IOL_B INST10( .PADDI(PADDI), .DO1(DO1), .DO0(DO0), .CE(CE), .IOLTO(IOLTO), 
    .HOLD(HOLD), .INCLK(INCLK), .OUTCLK(OUTCLK), .PADDO(PADDO), .PADDT(PADDT), 
    .DI1(DI1), .DI0(DI0));
  defparam INST10.LATCHIN = "NONE_REG";
  defparam INST10.DDROUT = "NO";
endmodule

module game_over_i0 ( input DO0, CE, OUTCLK, output PADDO );
  wire   GNDI, DO0_dly, OUTCLK_dly, CE_dly;

  IOL_B0070 game_over_i0_IOL_B( .PADDI(GNDI), .DO1(GNDI), .DO0(DO0_dly), 
    .CE(CE_dly), .IOLTO(GNDI), .HOLD(GNDI), .INCLK(GNDI), .OUTCLK(OUTCLK_dly), 
    .PADDO(PADDO), .PADDT(), .DI1(), .DI0());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (OUTCLK => PADDO) = (0:0:0,0:0:0);
    $setuphold (posedge OUTCLK, DO0, 0:0:0, 0:0:0,,,, OUTCLK_dly, DO0_dly);
    $setuphold (posedge OUTCLK, CE, 0:0:0, 0:0:0,,,, OUTCLK_dly, CE_dly);
  endspecify

endmodule

module IOL_B0070 ( input PADDI, DO1, DO0, CE, IOLTO, HOLD, INCLK, OUTCLK, 
    output PADDO, PADDT, DI1, DI0 );

  IOL_B INST10( .PADDI(PADDI), .DO1(DO1), .DO0(DO0), .CE(CE), .IOLTO(IOLTO), 
    .HOLD(HOLD), .INCLK(INCLK), .OUTCLK(OUTCLK), .PADDO(PADDO), .PADDT(PADDT), 
    .DI1(DI1), .DI0(DI0));
  defparam INST10.LATCHIN = "LATCH_REG";
  defparam INST10.DDROUT = "NO";
endmodule

module b_mem_mem0 ( input RADDR3, RADDR2, RADDR1, RADDR0, WADDR3, WADDR2, 
    WADDR1, WADDR0, WDATA15, WDATA14, WDATA13, WDATA12, WDATA11, WDATA10, 
    WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, WDATA4, WDATA3, WDATA2, WDATA1, 
    WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, output RDATA15, RDATA14, RDATA13, 
    RDATA12, RDATA11, RDATA10, RDATA9, RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, 
    RDATA3, RDATA2, RDATA1, RDATA0 );
  wire   GNDI, RADDR3_dly, RCLK_dly, RADDR2_dly, RADDR1_dly, RADDR0_dly, 
         WADDR3_dly, WCLK_dly, WADDR2_dly, WADDR1_dly, WADDR0_dly, WDATA15_dly, 
         WDATA14_dly, WDATA13_dly, WDATA12_dly, WDATA11_dly, WDATA10_dly, 
         WDATA9_dly, WDATA8_dly, WDATA7_dly, WDATA6_dly, WDATA5_dly, 
         WDATA4_dly, WDATA3_dly, WDATA2_dly, WDATA1_dly, WDATA0_dly, RCLKE_dly, 
         RE_dly, WCLKE_dly;

  EBR_B_B \b_mem.mem0_EBR_B ( .RADDR10(GNDI), .RADDR9(GNDI), .RADDR8(GNDI), 
    .RADDR7(GNDI), .RADDR6(GNDI), .RADDR5(GNDI), .RADDR4(GNDI), 
    .RADDR3(RADDR3_dly), .RADDR2(RADDR2_dly), .RADDR1(RADDR1_dly), 
    .RADDR0(RADDR0_dly), .WADDR10(GNDI), .WADDR9(GNDI), .WADDR8(GNDI), 
    .WADDR7(GNDI), .WADDR6(GNDI), .WADDR5(GNDI), .WADDR4(GNDI), 
    .WADDR3(WADDR3_dly), .WADDR2(WADDR2_dly), .WADDR1(WADDR1_dly), 
    .WADDR0(WADDR0_dly), .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), 
    .MASK_N12(GNDI), .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), 
    .MASK_N8(GNDI), .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), 
    .MASK_N4(GNDI), .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), 
    .MASK_N0(GNDI), .WDATA15(WDATA15_dly), .WDATA14(WDATA14_dly), 
    .WDATA13(WDATA13_dly), .WDATA12(WDATA12_dly), .WDATA11(WDATA11_dly), 
    .WDATA10(WDATA10_dly), .WDATA9(WDATA9_dly), .WDATA8(WDATA8_dly), 
    .WDATA7(WDATA7_dly), .WDATA6(WDATA6_dly), .WDATA5(WDATA5_dly), 
    .WDATA4(WDATA4_dly), .WDATA3(WDATA3_dly), .WDATA2(WDATA2_dly), 
    .WDATA1(WDATA1_dly), .WDATA0(WDATA0_dly), .RCLKE(RCLKE_dly), 
    .RCLK(RCLK_dly), .RE(RE_dly), .WCLKE(WCLKE_dly), .WCLK(WCLK_dly), 
    .WE(GNDI), .RDATA15(RDATA15), .RDATA14(RDATA14), .RDATA13(RDATA13), 
    .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), .RDATA9(RDATA9), 
    .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), .RDATA5(RDATA5), 
    .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), .RDATA1(RDATA1), 
    .RDATA0(RDATA0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (RCLK => RDATA15) = (0:0:0,0:0:0);
    (RCLK => RDATA14) = (0:0:0,0:0:0);
    (RCLK => RDATA13) = (0:0:0,0:0:0);
    (RCLK => RDATA12) = (0:0:0,0:0:0);
    (RCLK => RDATA11) = (0:0:0,0:0:0);
    (RCLK => RDATA10) = (0:0:0,0:0:0);
    (RCLK => RDATA9) = (0:0:0,0:0:0);
    (RCLK => RDATA8) = (0:0:0,0:0:0);
    (RCLK => RDATA7) = (0:0:0,0:0:0);
    (RCLK => RDATA6) = (0:0:0,0:0:0);
    (RCLK => RDATA5) = (0:0:0,0:0:0);
    (RCLK => RDATA4) = (0:0:0,0:0:0);
    (RCLK => RDATA3) = (0:0:0,0:0:0);
    (RCLK => RDATA2) = (0:0:0,0:0:0);
    (RCLK => RDATA1) = (0:0:0,0:0:0);
    (RCLK => RDATA0) = (0:0:0,0:0:0);
    $setuphold (posedge RCLK, RADDR3, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR3_dly);
    $setuphold (posedge RCLK, RADDR2, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR2_dly);
    $setuphold (posedge RCLK, RADDR1, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR1_dly);
    $setuphold (posedge RCLK, RADDR0, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR0_dly);
    $setuphold (posedge WCLK, WADDR3, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR3_dly);
    $setuphold (posedge WCLK, WADDR2, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR2_dly);
    $setuphold (posedge WCLK, WADDR1, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR1_dly);
    $setuphold (posedge WCLK, WADDR0, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR0_dly);
    $setuphold 
      (posedge WCLK, WDATA15, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA15_dly);
    $setuphold 
      (posedge WCLK, WDATA14, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA14_dly);
    $setuphold 
      (posedge WCLK, WDATA13, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA13_dly);
    $setuphold 
      (posedge WCLK, WDATA12, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA12_dly);
    $setuphold 
      (posedge WCLK, WDATA11, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA11_dly);
    $setuphold 
      (posedge WCLK, WDATA10, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA10_dly);
    $setuphold (posedge WCLK, WDATA9, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA9_dly);
    $setuphold (posedge WCLK, WDATA8, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA8_dly);
    $setuphold (posedge WCLK, WDATA7, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA7_dly);
    $setuphold (posedge WCLK, WDATA6, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA6_dly);
    $setuphold (posedge WCLK, WDATA5, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA5_dly);
    $setuphold (posedge WCLK, WDATA4, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA4_dly);
    $setuphold (posedge WCLK, WDATA3, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA3_dly);
    $setuphold (posedge WCLK, WDATA2, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA2_dly);
    $setuphold (posedge WCLK, WDATA1, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA1_dly);
    $setuphold (posedge WCLK, WDATA0, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA0_dly);
    $setuphold (posedge RCLK, RCLKE, 0:0:0, 0:0:0,,,, RCLK_dly, RCLKE_dly);
    $setuphold (posedge RCLK, RE, 0:0:0, 0:0:0,,,, RCLK_dly, RE_dly);
    $setuphold (posedge WCLK, WCLKE, 0:0:0, 0:0:0,,,, WCLK_dly, WCLKE_dly);
    $width (posedge RCLK, 0:0:0);
    $width (negedge RCLK, 0:0:0);
    $width (posedge WCLK, 0:0:0);
    $width (negedge WCLK, 0:0:0);
  endspecify

endmodule

module EBR_B_B ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, 
    RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, WADDR6, 
    WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_W = "16";
  defparam INST10.DATA_WIDTH_R = "16";

    defparam INST10.INIT_0 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_1 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_2 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_3 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_4 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_5 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_6 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_7 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_8 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_9 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_A = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_B = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_C = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_D = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_E = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_F = "0x0000000000000000000000000000000000000000000000000000000000000000";
endmodule

module b_mem_mem1 ( input RADDR3, RADDR2, RADDR1, RADDR0, WADDR3, WADDR2, 
    WADDR1, WADDR0, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, 
    WCLK, output RDATA3, RDATA2, RDATA1, RDATA0 );
  wire   GNDI, RADDR3_dly, RCLK_dly, RADDR2_dly, RADDR1_dly, RADDR0_dly, 
         WADDR3_dly, WCLK_dly, WADDR2_dly, WADDR1_dly, WADDR0_dly, WDATA3_dly, 
         WDATA2_dly, WDATA1_dly, WDATA0_dly, RCLKE_dly, RE_dly, WCLKE_dly;

  EBR_B0071 \b_mem.mem1_EBR_B ( .RADDR10(GNDI), .RADDR9(GNDI), .RADDR8(GNDI), 
    .RADDR7(GNDI), .RADDR6(GNDI), .RADDR5(GNDI), .RADDR4(GNDI), 
    .RADDR3(RADDR3_dly), .RADDR2(RADDR2_dly), .RADDR1(RADDR1_dly), 
    .RADDR0(RADDR0_dly), .WADDR10(GNDI), .WADDR9(GNDI), .WADDR8(GNDI), 
    .WADDR7(GNDI), .WADDR6(GNDI), .WADDR5(GNDI), .WADDR4(GNDI), 
    .WADDR3(WADDR3_dly), .WADDR2(WADDR2_dly), .WADDR1(WADDR1_dly), 
    .WADDR0(WADDR0_dly), .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), 
    .MASK_N12(GNDI), .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), 
    .MASK_N8(GNDI), .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), 
    .MASK_N4(GNDI), .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), 
    .MASK_N0(GNDI), .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), 
    .WDATA12(GNDI), .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), 
    .WDATA8(GNDI), .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), 
    .WDATA3(WDATA3_dly), .WDATA2(WDATA2_dly), .WDATA1(WDATA1_dly), 
    .WDATA0(WDATA0_dly), .RCLKE(RCLKE_dly), .RCLK(RCLK_dly), .RE(RE_dly), 
    .WCLKE(WCLKE_dly), .WCLK(WCLK_dly), .WE(GNDI), .RDATA15(), .RDATA14(), 
    .RDATA13(), .RDATA12(), .RDATA11(), .RDATA10(), .RDATA9(), .RDATA8(), 
    .RDATA7(), .RDATA6(), .RDATA5(), .RDATA4(), .RDATA3(RDATA3), 
    .RDATA2(RDATA2), .RDATA1(RDATA1), .RDATA0(RDATA0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (RCLK => RDATA3) = (0:0:0,0:0:0);
    (RCLK => RDATA2) = (0:0:0,0:0:0);
    (RCLK => RDATA1) = (0:0:0,0:0:0);
    (RCLK => RDATA0) = (0:0:0,0:0:0);
    $setuphold (posedge RCLK, RADDR3, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR3_dly);
    $setuphold (posedge RCLK, RADDR2, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR2_dly);
    $setuphold (posedge RCLK, RADDR1, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR1_dly);
    $setuphold (posedge RCLK, RADDR0, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR0_dly);
    $setuphold (posedge WCLK, WADDR3, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR3_dly);
    $setuphold (posedge WCLK, WADDR2, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR2_dly);
    $setuphold (posedge WCLK, WADDR1, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR1_dly);
    $setuphold (posedge WCLK, WADDR0, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR0_dly);
    $setuphold (posedge WCLK, WDATA3, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA3_dly);
    $setuphold (posedge WCLK, WDATA2, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA2_dly);
    $setuphold (posedge WCLK, WDATA1, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA1_dly);
    $setuphold (posedge WCLK, WDATA0, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA0_dly);
    $setuphold (posedge RCLK, RCLKE, 0:0:0, 0:0:0,,,, RCLK_dly, RCLKE_dly);
    $setuphold (posedge RCLK, RE, 0:0:0, 0:0:0,,,, RCLK_dly, RE_dly);
    $setuphold (posedge WCLK, WCLKE, 0:0:0, 0:0:0,,,, WCLK_dly, WCLKE_dly);
    $width (posedge RCLK, 0:0:0);
    $width (negedge RCLK, 0:0:0);
    $width (posedge WCLK, 0:0:0);
    $width (negedge WCLK, 0:0:0);
  endspecify

endmodule

module EBR_B0071 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_W = "16";
  defparam INST10.DATA_WIDTH_R = "16";

    defparam INST10.INIT_0 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_1 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_2 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_3 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_4 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_5 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_6 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_7 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_8 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_9 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_A = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_B = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_C = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_D = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_E = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_F = "0x0000000000000000000000000000000000000000000000000000000000000000";
endmodule

module g_clk ( output PADDI, input g_clk );
  wire   GNDI;

  BB_B_B g_clk_BB_B( .T_N(GNDI), .I(GNDI), .O(PADDI), .B(g_clk));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (g_clk => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module BB_B_B ( input T_N, I, output O, inout B );

  BB_B INST10( .T_N(T_N), .I(I), .O(O), .B(B));
endmodule

module data ( output PADDI, input data );
  wire   GNDI;

  BB_B_B data_BB_B( .T_N(GNDI), .I(GNDI), .O(PADDI), .B(data));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (data => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module game_over ( input PADDO, output game_over );
  wire   VCCI;

  BB_B_B game_over_BB_B( .T_N(VCCI), .I(PADDO), .O(), .B(game_over));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => game_over) = (0:0:0,0:0:0);
  endspecify

endmodule
