
// Verilog netlist produced by program backanno, Version Radiant Software (64-bit) 2.2.0.97.3

// backanno -o game_logic_impl_1_vo.vo -sp High-Performance_1.2V -w -neg -gui game_logic_impl_1.udb 
// Netlist created on Thu May  6 16:57:46 2021
// Netlist written on Thu May  6 16:57:47 2021
// Design is for device iCE40UP5K
// Design is for package SG48
// Design is for performance grade High-Performance_1.2V

`timescale 1 ns / 1 ps

module lfsr ( count, clk, reset );
  input  clk, reset;
  output [19:0] count;
  wire   \count_c_3.sig_018.FeedThruLUT , \count_c_4.sig_000.FeedThruLUT , 
         count_c_3, count_c_4, reset_c, clk_c, count_c_2, 
         \count_c_6.sig_002.FeedThruLUT , \count_c_5.sig_001.FeedThruLUT , 
         count_c_6, count_c_5, \count_c_8.sig_004.FeedThruLUT , 
         \count_c_7.sig_003.FeedThruLUT , count_c_8, count_c_7, 
         \count_c_10.sig_006.FeedThruLUT , \count_c_9.sig_005.FeedThruLUT , 
         count_c_10, count_c_9, \count_c_12.sig_008.FeedThruLUT , 
         \count_c_11.sig_007.FeedThruLUT , count_c_12, count_c_11, 
         \count_c_14.sig_010.FeedThruLUT , \count_c_13.sig_009.FeedThruLUT , 
         count_c_14, count_c_13, \count_c_16.sig_012.FeedThruLUT , 
         \count_c_15.sig_011.FeedThruLUT , count_c_16, count_c_15, 
         \count_c_18.sig_014.FeedThruLUT , \count_c_17.sig_013.FeedThruLUT , 
         count_c_18, count_c_17, i_19__N_1, \count_c_19.sig_015.FeedThruLUT , 
         n36, n34, n35, n33, count_c_19, \count_c_2.sig_017.FeedThruLUT , 
         \count_c_1.sig_016.FeedThruLUT , count_c_1, count_c_0, n22, n32;

  SLICE_0 SLICE_0( .DI1(\count_c_3.sig_018.FeedThruLUT ), 
    .DI0(\count_c_4.sig_000.FeedThruLUT ), .A1(count_c_3), .B0(count_c_4), 
    .LSR(reset_c), .CLK(clk_c), .Q0(count_c_3), .Q1(count_c_2), 
    .F0(\count_c_4.sig_000.FeedThruLUT ), .F1(\count_c_3.sig_018.FeedThruLUT ));
  SLICE_1 SLICE_1( .DI1(\count_c_6.sig_002.FeedThruLUT ), 
    .DI0(\count_c_5.sig_001.FeedThruLUT ), .C1(count_c_6), .B0(count_c_5), 
    .LSR(reset_c), .CLK(clk_c), .Q0(count_c_4), .Q1(count_c_5), 
    .F0(\count_c_5.sig_001.FeedThruLUT ), .F1(\count_c_6.sig_002.FeedThruLUT ));
  SLICE_3 SLICE_3( .DI1(\count_c_8.sig_004.FeedThruLUT ), 
    .DI0(\count_c_7.sig_003.FeedThruLUT ), .A1(count_c_8), .B0(count_c_7), 
    .LSR(reset_c), .CLK(clk_c), .Q0(count_c_6), .Q1(count_c_7), 
    .F0(\count_c_7.sig_003.FeedThruLUT ), .F1(\count_c_8.sig_004.FeedThruLUT ));
  SLICE_5 SLICE_5( .DI1(\count_c_10.sig_006.FeedThruLUT ), 
    .DI0(\count_c_9.sig_005.FeedThruLUT ), .B1(count_c_10), .C0(count_c_9), 
    .LSR(reset_c), .CLK(clk_c), .Q0(count_c_8), .Q1(count_c_9), 
    .F0(\count_c_9.sig_005.FeedThruLUT ), 
    .F1(\count_c_10.sig_006.FeedThruLUT ));
  SLICE_7 SLICE_7( .DI1(\count_c_12.sig_008.FeedThruLUT ), 
    .DI0(\count_c_11.sig_007.FeedThruLUT ), .A1(count_c_12), .A0(count_c_11), 
    .LSR(reset_c), .CLK(clk_c), .Q0(count_c_10), .Q1(count_c_11), 
    .F0(\count_c_11.sig_007.FeedThruLUT ), 
    .F1(\count_c_12.sig_008.FeedThruLUT ));
  SLICE_9 SLICE_9( .DI1(\count_c_14.sig_010.FeedThruLUT ), 
    .DI0(\count_c_13.sig_009.FeedThruLUT ), .C1(count_c_14), .B0(count_c_13), 
    .LSR(reset_c), .CLK(clk_c), .Q0(count_c_12), .Q1(count_c_13), 
    .F0(\count_c_13.sig_009.FeedThruLUT ), 
    .F1(\count_c_14.sig_010.FeedThruLUT ));
  SLICE_11 SLICE_11( .DI1(\count_c_16.sig_012.FeedThruLUT ), 
    .DI0(\count_c_15.sig_011.FeedThruLUT ), .A1(count_c_16), .B0(count_c_15), 
    .LSR(reset_c), .CLK(clk_c), .Q0(count_c_14), .Q1(count_c_15), 
    .F0(\count_c_15.sig_011.FeedThruLUT ), 
    .F1(\count_c_16.sig_012.FeedThruLUT ));
  SLICE_13 SLICE_13( .DI1(\count_c_18.sig_014.FeedThruLUT ), 
    .DI0(\count_c_17.sig_013.FeedThruLUT ), .A1(count_c_18), .A0(count_c_17), 
    .LSR(reset_c), .CLK(clk_c), .Q0(count_c_16), .Q1(count_c_17), 
    .F0(\count_c_17.sig_013.FeedThruLUT ), 
    .F1(\count_c_18.sig_014.FeedThruLUT ));
  SLICE_15 SLICE_15( .DI1(i_19__N_1), .DI0(\count_c_19.sig_015.FeedThruLUT ), 
    .D1(n36), .C1(n34), .B1(n35), .A1(n33), .B0(count_c_19), .LSR(reset_c), 
    .CLK(clk_c), .Q0(count_c_18), .Q1(count_c_19), 
    .F0(\count_c_19.sig_015.FeedThruLUT ), .F1(i_19__N_1));
  SLICE_17 SLICE_17( .DI1(\count_c_2.sig_017.FeedThruLUT ), 
    .DI0(\count_c_1.sig_016.FeedThruLUT ), .A1(count_c_2), .A0(count_c_1), 
    .LSR(reset_c), .CLK(clk_c), .Q0(count_c_0), .Q1(count_c_1), 
    .F0(\count_c_1.sig_016.FeedThruLUT ), .F1(\count_c_2.sig_017.FeedThruLUT ));
  SLICE_20 SLICE_20( .C0(count_c_3), .A0(count_c_16), .F0(n22));
  SLICE_21 SLICE_21( .D1(n22), .C1(count_c_18), .B1(n32), .A1(count_c_7), 
    .D0(count_c_14), .C0(count_c_0), .B0(count_c_6), .A0(count_c_9), .F0(n32), 
    .F1(n36));
  SLICE_22 SLICE_22( .D0(count_c_13), .C0(count_c_8), .B0(count_c_1), 
    .A0(count_c_17), .F0(n33));
  SLICE_23 SLICE_23( .D0(count_c_2), .C0(count_c_12), .B0(count_c_15), 
    .A0(count_c_11), .F0(n35));
  SLICE_25 SLICE_25( .D0(count_c_4), .C0(count_c_5), .B0(count_c_10), 
    .A0(count_c_19), .F0(n34));
  count_19_ \count[19]_I ( .PADDO(count_c_19), .count19(count[19]));
  count_18_ \count[18]_I ( .PADDO(count_c_18), .count18(count[18]));
  count_17_ \count[17]_I ( .PADDO(count_c_17), .count17(count[17]));
  count_16_ \count[16]_I ( .PADDO(count_c_16), .count16(count[16]));
  count_15_ \count[15]_I ( .PADDO(count_c_15), .count15(count[15]));
  count_14_ \count[14]_I ( .PADDO(count_c_14), .count14(count[14]));
  count_13_ \count[13]_I ( .PADDO(count_c_13), .count13(count[13]));
  count_12_ \count[12]_I ( .PADDO(count_c_12), .count12(count[12]));
  count_11_ \count[11]_I ( .PADDO(count_c_11), .count11(count[11]));
  count_10_ \count[10]_I ( .PADDO(count_c_10), .count10(count[10]));
  count_9_ \count[9]_I ( .PADDO(count_c_9), .count9(count[9]));
  count_8_ \count[8]_I ( .PADDO(count_c_8), .count8(count[8]));
  count_7_ \count[7]_I ( .PADDO(count_c_7), .count7(count[7]));
  count_6_ \count[6]_I ( .PADDO(count_c_6), .count6(count[6]));
  count_5_ \count[5]_I ( .PADDO(count_c_5), .count5(count[5]));
  count_4_ \count[4]_I ( .PADDO(count_c_4), .count4(count[4]));
  count_3_ \count[3]_I ( .PADDO(count_c_3), .count3(count[3]));
  count_2_ \count[2]_I ( .PADDO(count_c_2), .count2(count[2]));
  count_1_ \count[1]_I ( .PADDO(count_c_1), .count1(count[1]));
  count_0_ \count[0]_I ( .PADDO(count_c_0), .count0(count[0]));
  clk clk_I( .PADDI(clk_c), .clk(clk));
  reset reset_I( .PADDI(reset_c), .reset(reset));
endmodule

module SLICE_0 ( input DI1, DI0, A1, B0, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut4 SLICE_0_K1( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40001 SLICE_0_K0( .A(GNDI), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 i_i3( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 i_i4( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  LUT4 #("0xAAAA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module lut40001 ( input A, B, C, D, output Z );

  LUT4 #("0xCCCC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module ffsre2 ( input D0, SP, CK, LSR, output Q );

  FD1P3XZ INST01( .D(D0), .SP(SP), .CK(CK), .SR(LSR), .Q(Q));
  defparam INST01.REGSET = "RESET";
  defparam INST01.SRMODE = "ASYNC";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module SLICE_1 ( input DI1, DI0, C1, B0, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40002 SLICE_1_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40001 SLICE_1_K0( .A(GNDI), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 i_i6( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 i_i5( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40002 ( input A, B, C, D, output Z );

  LUT4 #("0xF0F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_3 ( input DI1, DI0, A1, B0, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut4 SLICE_3_K1( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40001 SLICE_3_K0( .A(GNDI), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 i_i8( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 i_i7( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_5 ( input DI1, DI0, B1, C0, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40003 SLICE_5_K1( .A(GNDI), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40004 SLICE_5_K0( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  ffsre2 i_i10( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 i_i9( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40003 ( input A, B, C, D, output Z );

  LUT4 #("0xCCCC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40004 ( input A, B, C, D, output Z );

  LUT4 #("0xF0F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_7 ( input DI1, DI0, A1, A0, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut4 SLICE_7_K1( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40005 SLICE_7_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 i_i12( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 i_i11( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40005 ( input A, B, C, D, output Z );

  LUT4 #("0xAAAA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_9 ( input DI1, DI0, C1, B0, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40002 SLICE_9_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40001 SLICE_9_K0( .A(GNDI), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 i_i14( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 i_i13( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_11 ( input DI1, DI0, A1, B0, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut4 SLICE_11_K1( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40001 SLICE_11_K0( .A(GNDI), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 i_i16( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 i_i15( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_13 ( input DI1, DI0, A1, A0, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut4 SLICE_13_K1( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40005 SLICE_13_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 i_i18( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 i_i17( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_15 ( input DI1, DI0, D1, C1, B1, A1, B0, LSR, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40006 i19_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40001 SLICE_15_K0( .A(GNDI), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 i_i20( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 i_i19( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40006 ( input A, B, C, D, output Z );

  LUT4 #("0x6996") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_17 ( input DI1, DI0, A1, A0, LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut4 SLICE_17_K1( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40005 SLICE_17_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 i_i2( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre20007 i_i1( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module ffsre20007 ( input D0, SP, CK, LSR, output Q );

  FD1P3XZ INST01( .D(D0), .SP(SP), .CK(CK), .SR(LSR), .Q(Q));
  defparam INST01.REGSET = "SET";
  defparam INST01.SRMODE = "ASYNC";
endmodule

module SLICE_20 ( input C0, A0, output F0 );
  wire   GNDI;

  lut40008 i2_2_lut( .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40008 ( input A, B, C, D, output Z );

  LUT4 #("0x5A5A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_21 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40009 i16_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40010 i12_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40009 ( input A, B, C, D, output Z );

  LUT4 #("0x6996") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40010 ( input A, B, C, D, output Z );

  LUT4 #("0x6996") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_22 ( input D0, C0, B0, A0, output F0 );

  lut40011 i13_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40011 ( input A, B, C, D, output Z );

  LUT4 #("0x6996") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_23 ( input D0, C0, B0, A0, output F0 );

  lut40012 i15_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40012 ( input A, B, C, D, output Z );

  LUT4 #("0x6996") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_25 ( input D0, C0, B0, A0, output F0 );

  lut40013 i14_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40013 ( input A, B, C, D, output Z );

  LUT4 #("0x6996") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module count_19_ ( input PADDO, output count19 );
  wire   VCCI;

  BB_B_B \count[19]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count19));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count19) = (0:0:0,0:0:0);
  endspecify

endmodule

module BB_B_B ( input T_N, I, output O, inout B );

  BB_B INST10( .T_N(T_N), .I(I), .O(O), .B(B));
endmodule

module count_18_ ( input PADDO, output count18 );
  wire   VCCI;

  BB_B_B \count[18]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count18));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count18) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_17_ ( input PADDO, output count17 );
  wire   VCCI;

  BB_B_B \count[17]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count17));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count17) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_16_ ( input PADDO, output count16 );
  wire   VCCI;

  BB_B_B \count[16]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count16));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count16) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_15_ ( input PADDO, output count15 );
  wire   VCCI;

  BB_B_B \count[15]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count15));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count15) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_14_ ( input PADDO, output count14 );
  wire   VCCI;

  BB_B_B \count[14]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count14));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count14) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_13_ ( input PADDO, output count13 );
  wire   VCCI;

  BB_B_B \count[13]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count13));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count13) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_12_ ( input PADDO, output count12 );
  wire   VCCI;

  BB_B_B \count[12]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count12));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count12) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_11_ ( input PADDO, output count11 );
  wire   VCCI;

  BB_B_B \count[11]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count11));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count11) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_10_ ( input PADDO, output count10 );
  wire   VCCI;

  BB_B_B \count[10]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count10));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count10) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_9_ ( input PADDO, output count9 );
  wire   VCCI;

  BB_B_B \count[9]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count9));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count9) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_8_ ( input PADDO, output count8 );
  wire   VCCI;

  BB_B_B \count[8]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count8));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count8) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_7_ ( input PADDO, output count7 );
  wire   VCCI;

  BB_B_B \count[7]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count7));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count7) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_6_ ( input PADDO, output count6 );
  wire   VCCI;

  BB_B_B \count[6]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count6));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count6) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_5_ ( input PADDO, output count5 );
  wire   VCCI;

  BB_B_B \count[5]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count5));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count5) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_4_ ( input PADDO, output count4 );
  wire   VCCI;

  BB_B_B \count[4]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count4));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count4) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_3_ ( input PADDO, output count3 );
  wire   VCCI;

  BB_B_B \count[3]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count3));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count3) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_2_ ( input PADDO, output count2 );
  wire   VCCI;

  BB_B_B \count[2]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count2));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count2) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_1_ ( input PADDO, output count1 );
  wire   VCCI;

  BB_B_B \count[1]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count1) = (0:0:0,0:0:0);
  endspecify

endmodule

module count_0_ ( input PADDO, output count0 );
  wire   VCCI;

  BB_B_B \count[0]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(count0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => count0) = (0:0:0,0:0:0);
  endspecify

endmodule

module clk ( output PADDI, input clk );
  wire   GNDI;

  BB_B_B clk_BB_B( .T_N(GNDI), .I(GNDI), .O(PADDI), .B(clk));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (clk => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module reset ( output PADDI, input reset );
  wire   GNDI;

  BB_B_B reset_BB_B( .T_N(GNDI), .I(GNDI), .O(PADDI), .B(reset));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (reset => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule
